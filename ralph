#!/usr/bin/env bash
# ABOUTME: Bash wrapper for ralph-orchestrator with convenience features
# ABOUTME: Provides simplified interface and common workflow shortcuts

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Script directory
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
ORCHESTRATOR="$SCRIPT_DIR/ralph_orchestrator.py"

# Default values
DEFAULT_AGENT="auto"
DEFAULT_PROMPT="PROMPT.md"

# Help function
show_help() {
    cat << EOF
Ralph Orchestrator - Put AI in a loop until done

Usage: ralph [COMMAND] [OPTIONS]

Commands:
    run         Run the orchestrator (default)
    init        Initialize a new Ralph project
    status      Show current Ralph status
    clean       Clean up agent workspace
    help        Show this help message

Run Options:
    -a, --agent AGENT           AI agent to use (claude/q/gemini/auto)
    -p, --prompt FILE           Prompt file (default: PROMPT.md)
    -i, --iterations N          Max iterations (default: 100)
    -t, --time SECONDS          Max runtime in seconds (default: 14400)
    -v, --verbose               Enable verbose output
    -d, --dry-run               Dry run mode (test without execution)

Advanced Options:
    --max-tokens N              Maximum total tokens (default: 1,000,000)
    --max-cost AMOUNT           Maximum cost in USD (default: 50.00)
    --context-window N          Context window size (default: 200,000)
    --context-threshold RATIO   Context summarization threshold (default: 0.8)
    --checkpoint-interval N     Git checkpoint interval (default: 5)
    --retry-delay SECONDS       Retry delay on errors (default: 2)
    --metrics-interval N        Metrics logging interval (default: 10)
    --max-prompt-size BYTES     Max prompt file size (default: 10MB)
    --no-git                    Disable git checkpointing
    --no-archive                Disable prompt archiving
    --no-metrics                Disable metrics collection
    --allow-unsafe-paths        Allow potentially unsafe prompt paths

Examples:
    ralph                           # Run with auto-detected agent
    ralph run -a claude             # Use Claude agent
    ralph run -p task.md -i 50      # Custom prompt, max 50 iterations
    ralph run -t 3600 --dry-run     # Test mode with 1 hour timeout
    ralph run --max-cost 10.00      # Limit spending to $10
    ralph init                      # Set up new project
    ralph status                    # Check current progress
    ralph clean                     # Clean agent workspace

Note: Additional arguments after options are passed directly to the AI agent.

EOF
}

# Initialize project
init_project() {
    echo -e "${GREEN}Initializing Ralph project...${NC}"
    
    # Create directories
    mkdir -p .agent/{prompts,checkpoints,metrics,plans,memory}
    
    # Create default PROMPT.md if it doesn't exist
    if [ ! -f "PROMPT.md" ]; then
        cat > PROMPT.md << 'EOF'
# Task: [Describe your task here]

## Requirements
- [ ] Requirement 1
- [ ] Requirement 2

## Success Criteria
- All requirements met
- Tests pass
- Code is clean

<!-- Add TASK_COMPLETE when done -->
EOF
        echo -e "${GREEN}Created PROMPT.md template${NC}"
    fi
    
    # Initialize git if not already
    if [ ! -d ".git" ]; then
        git init
        echo -e "${GREEN}Initialized git repository${NC}"
    fi
    
    echo -e "${GREEN}Ralph project initialized!${NC}"
}

# Show status
show_status() {
    echo -e "${YELLOW}Ralph Orchestrator Status${NC}"
    echo "========================="
    
    # Check for PROMPT.md
    if [ -f "PROMPT.md" ]; then
        echo -e "Prompt: ${GREEN}PROMPT.md exists${NC}"
        if grep -q "TASK_COMPLETE" PROMPT.md; then
            echo -e "Status: ${GREEN}TASK COMPLETE${NC}"
        else
            echo -e "Status: ${YELLOW}IN PROGRESS${NC}"
        fi
    else
        echo -e "Prompt: ${RED}PROMPT.md not found${NC}"
    fi
    
    # Check iterations
    if [ -d ".agent/metrics" ]; then
        LATEST_STATE=$(ls -t .agent/metrics/state_*.json 2>/dev/null | head -1)
        if [ -n "$LATEST_STATE" ]; then
            echo -e "\nLatest metrics: $LATEST_STATE"
            if command -v jq &> /dev/null; then
                jq '{iteration_count, runtime, errors: (.errors | length)}' "$LATEST_STATE" 2>/dev/null || true
            fi
        fi
    fi
    
    # Check git status
    if [ -d ".git" ]; then
        echo -e "\nGit checkpoints:"
        git log --oneline -5 2>/dev/null | head -5 || echo "No checkpoints yet"
    fi
}

# Clean workspace
clean_workspace() {
    echo -e "${YELLOW}Cleaning Ralph workspace...${NC}"
    
    read -p "Remove .agent directory? (y/N) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        rm -rf .agent
        echo -e "${GREEN}Removed .agent directory${NC}"
    fi
    
    read -p "Reset git to last checkpoint? (y/N) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        git reset --hard HEAD
        echo -e "${GREEN}Reset to last checkpoint${NC}"
    fi
}

# Main run function
run_orchestrator() {
    if [ ! -f "$ORCHESTRATOR" ]; then
        echo -e "${RED}Error: ralph-orchestrator.py not found at $ORCHESTRATOR${NC}"
        exit 1
    fi
    
    # Build command
    CMD="python3 $ORCHESTRATOR"
    
    # Collect any remaining arguments for passing to agent
    AGENT_ARGS=""
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -a|--agent)
                CMD="$CMD --agent $2"
                shift 2
                ;;
            -p|--prompt)
                CMD="$CMD --prompt $2"
                shift 2
                ;;
            -i|--iterations)
                CMD="$CMD --max-iterations $2"
                shift 2
                ;;
            -t|--time)
                CMD="$CMD --max-runtime $2"
                shift 2
                ;;
            -v|--verbose)
                CMD="$CMD --verbose"
                shift
                ;;
            -d|--dry-run)
                CMD="$CMD --dry-run"
                shift
                ;;
            --max-tokens)
                CMD="$CMD --max-tokens $2"
                shift 2
                ;;
            --max-cost)
                CMD="$CMD --max-cost $2"
                shift 2
                ;;
            --context-window)
                CMD="$CMD --context-window $2"
                shift 2
                ;;
            --context-threshold)
                CMD="$CMD --context-threshold $2"
                shift 2
                ;;
            --checkpoint-interval)
                CMD="$CMD --checkpoint-interval $2"
                shift 2
                ;;
            --retry-delay)
                CMD="$CMD --retry-delay $2"
                shift 2
                ;;
            --metrics-interval)
                CMD="$CMD --metrics-interval $2"
                shift 2
                ;;
            --max-prompt-size)
                CMD="$CMD --max-prompt-size $2"
                shift 2
                ;;
            --no-git)
                CMD="$CMD --no-git"
                shift
                ;;
            --no-archive)
                CMD="$CMD --no-archive"
                shift
                ;;
            --no-metrics)
                CMD="$CMD --no-metrics"
                shift
                ;;
            --allow-unsafe-paths)
                CMD="$CMD --allow-unsafe-paths"
                shift
                ;;
            *)
                # Collect remaining arguments for agent
                AGENT_ARGS="$AGENT_ARGS $1"
                shift
                ;;
        esac
    done
    
    # Add agent arguments if any
    if [ -n "$AGENT_ARGS" ]; then
        CMD="$CMD $AGENT_ARGS"
    fi
    
    echo -e "${GREEN}Starting Ralph Orchestrator...${NC}"
    echo "Command: $CMD"
    echo "========================="
    
    # Run the orchestrator
    exec $CMD
}

# Main logic
case "${1:-run}" in
    run)
        shift
        run_orchestrator "$@"
        ;;
    init)
        init_project
        ;;
    status)
        show_status
        ;;
    clean)
        clean_workspace
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        # If no command given, assume it's run with the argument as an option
        run_orchestrator "$@"
        ;;
esac