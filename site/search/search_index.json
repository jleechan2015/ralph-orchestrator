{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Ralph Orchestrator","text":"## Production-Ready AI Orchestration  *Put your AI agent in a loop until the task is done*  [![Version](https://img.shields.io/badge/version-1.0.0-blue)](https://github.com/mikeyobrien/ralph-orchestrator/releases) [![License](https://img.shields.io/badge/license-MIT-green)](LICENSE) [![Tests](https://img.shields.io/badge/tests-18%20passing-brightgreen)](tests/) [![Python](https://img.shields.io/badge/python-3.8%2B-blue)](https://www.python.org/)  &gt; \"Me fail English? That's unpossible!\" - Ralph Wiggum"},{"location":"#what-is-ralph-orchestrator","title":"What is Ralph Orchestrator?","text":"<p>Ralph Orchestrator is a production-ready implementation of the Ralph Wiggum orchestration technique - a simple yet powerful pattern for autonomous AI task completion. It continuously runs an AI agent against a prompt file until the task is marked as complete or limits are reached.</p> <p>Based on the technique by Geoffrey Huntley, this implementation provides enterprise-grade safety, monitoring, and cost controls suitable for production environments.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li> <p>\ud83e\udd16 Multi-Agent Support   Works seamlessly with Claude, Q Chat, and Gemini CLI tools with automatic detection</p> </li> <li> <p>\ud83d\udcb0 Cost Management   Real-time token tracking, cost calculation, and configurable spending limits</p> </li> <li> <p>\ud83d\udd12 Enterprise Security   Input sanitization, command injection prevention, and path traversal protection</p> </li> <li> <p>\ud83d\udcca Production Monitoring   System metrics, performance tracking, and detailed JSON exports</p> </li> <li> <p>\ud83d\udd04 Resilient Execution   Automatic retries, circuit breakers, and state persistence</p> </li> <li> <p>\ud83d\udcbe Git Checkpointing   Version control integration for state recovery and history tracking</p> </li> </ul>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code># 1. Create a task prompt\ncat &gt; PROMPT.md &lt;&lt; EOF\nCreate a Python function that calculates the Fibonacci sequence.\nInclude proper documentation and unit tests.\nWhen complete, add \"TASK_COMPLETE\" to this file.\nEOF\n\n# 2. Run Ralph\npython ralph_orchestrator.py --prompt PROMPT.md\n\n# 3. Ralph iterates until the task is done!\n</code></pre>"},{"location":"#why-ralph-orchestrator","title":"Why Ralph Orchestrator?","text":""},{"location":"#the-problem","title":"The Problem","text":"<p>Modern AI agents are powerful but require supervision. They can lose context, make mistakes, or need multiple iterations to complete complex tasks. Manual supervision is time-consuming and error-prone.</p>"},{"location":"#the-solution","title":"The Solution","text":"<p>Ralph Orchestrator automates the iteration loop while maintaining safety and control:</p> <ul> <li>Autonomous Operation: Set it and forget it - Ralph handles the iterations</li> <li>Safety First: Built-in limits prevent runaway costs and infinite loops</li> <li>Production Ready: Battle-tested with comprehensive error handling</li> <li>Observable: Detailed metrics and logging for debugging and optimization</li> <li>Recoverable: Checkpoint system allows resuming from any point</li> </ul>"},{"location":"#use-cases","title":"Use Cases","text":"<p>Ralph Orchestrator excels at:</p> <ul> <li>Code Generation: Building features, fixing bugs, writing tests</li> <li>Documentation: Creating comprehensive docs, API references, tutorials</li> <li>Data Processing: ETL pipelines, data analysis, report generation</li> <li>Automation: CI/CD setup, deployment scripts, infrastructure as code</li> <li>Research: Information gathering, summarization, analysis</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Ready to put Ralph to work? Check out our Quick Start Guide to get up and running in minutes.</p>"},{"location":"#production-features","title":"Production Features","text":"<p>Ralph Orchestrator is designed for production use with:</p> <ul> <li>Token &amp; Cost Limits: Prevent budget overruns</li> <li>Context Management: Handle large prompts intelligently</li> <li>Security Controls: Protect against malicious inputs</li> <li>Monitoring &amp; Metrics: Track performance and usage</li> <li>Error Recovery: Graceful handling of failures</li> <li>State Persistence: Resume interrupted tasks</li> </ul> <p>Learn more in our Production Deployment Guide.</p>"},{"location":"#community-support","title":"Community &amp; Support","text":"<ul> <li>\ud83d\udcd6 Documentation</li> <li>\ud83d\udc1b Issue Tracker</li> <li>\ud83d\udcac Discussions</li> <li>\ud83e\udd1d Contributing Guide</li> </ul>"},{"location":"#license","title":"License","text":"<p>Ralph Orchestrator is open source software licensed as MIT.</p> Built with \u2764\ufe0f by the Ralph Orchestrator community"},{"location":"contributing/","title":"Contributing to Ralph Orchestrator","text":"<p>Thank you for your interest in contributing to Ralph Orchestrator! This guide will help you get started with contributing to the project.</p>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>By participating in this project, you agree to abide by our Code of Conduct. Please read it before contributing.</p>"},{"location":"contributing/#ways-to-contribute","title":"Ways to Contribute","text":""},{"location":"contributing/#1-report-bugs","title":"1. Report Bugs","text":"<p>Found a bug? Help us fix it:</p> <ol> <li>Check existing issues to avoid duplicates</li> <li>Create a new issue with:</li> <li>Clear title and description</li> <li>Steps to reproduce</li> <li>Expected vs actual behavior</li> <li>System information</li> <li>Error messages/logs</li> </ol> <p>Bug Report Template: <pre><code>## Description\nBrief description of the bug\n\n## Steps to Reproduce\n1. Run command: `python ralph_orchestrator.py ...`\n2. See error\n\n## Expected Behavior\nWhat should happen\n\n## Actual Behavior\nWhat actually happens\n\n## Environment\n- OS: [e.g., Ubuntu 22.04]\n- Python: [e.g., 3.10.5]\n- Ralph Version: [e.g., 1.0.0]\n- AI Agent: [e.g., claude]\n\n## Logs\n</code></pre> Error messages here <pre><code>\n</code></pre></p>"},{"location":"contributing/#2-suggest-features","title":"2. Suggest Features","text":"<p>Have an idea? We'd love to hear it:</p> <ol> <li>Check existing feature requests</li> <li>Open a discussion for major changes</li> <li>Create a feature request with:</li> <li>Use case description</li> <li>Proposed solution</li> <li>Alternative approaches</li> <li>Implementation considerations</li> </ol>"},{"location":"contributing/#3-improve-documentation","title":"3. Improve Documentation","text":"<p>Documentation improvements are always welcome:</p> <ul> <li>Fix typos and grammar</li> <li>Clarify confusing sections</li> <li>Add missing information</li> <li>Create new examples</li> <li>Translate documentation</li> </ul>"},{"location":"contributing/#4-contribute-code","title":"4. Contribute Code","text":"<p>Ready to code? Follow these steps:</p>"},{"location":"contributing/#setup-development-environment","title":"Setup Development Environment","text":"<pre><code># Fork and clone the repository\ngit clone https://github.com/YOUR_USERNAME/ralph-orchestrator.git\ncd ralph-orchestrator\n\n# Create a virtual environment\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n\n# Install development dependencies\npip install -e .\npip install pytest pytest-cov black ruff\n\n# Install pre-commit hooks (optional)\npip install pre-commit\npre-commit install\n</code></pre>"},{"location":"contributing/#development-workflow","title":"Development Workflow","text":"<ol> <li> <p>Create a branch <pre><code>git checkout -b feature/your-feature-name\n# or\ngit checkout -b fix/issue-number\n</code></pre></p> </li> <li> <p>Make changes</p> </li> <li>Follow existing code style</li> <li>Add/update tests</li> <li> <p>Update documentation</p> </li> <li> <p>Test your changes <pre><code># Run all tests\npytest\n\n# Run specific test\npytest test_orchestrator.py::test_function\n\n# Check coverage\npytest --cov=ralph_orchestrator --cov-report=html\n</code></pre></p> </li> <li> <p>Format code <pre><code># Format with black\nblack ralph_orchestrator.py\n\n# Lint with ruff\nruff check ralph_orchestrator.py\n</code></pre></p> </li> <li> <p>Commit changes <pre><code>git add .\ngit commit -m \"feat: add new feature\"\n# Use conventional commits: feat, fix, docs, test, refactor, style, chore\n</code></pre></p> </li> <li> <p>Push and create PR <pre><code>git push origin feature/your-feature-name\n</code></pre></p> </li> </ol>"},{"location":"contributing/#development-guidelines","title":"Development Guidelines","text":""},{"location":"contributing/#code-style","title":"Code Style","text":"<p>We follow PEP 8 with these preferences:</p> <ul> <li>Line length: 88 characters (Black default)</li> <li>Quotes: Double quotes for strings</li> <li>Imports: Sorted with <code>isort</code></li> <li>Type hints: Use where beneficial</li> <li>Docstrings: Google style</li> </ul> <p>Example: <pre><code>def calculate_cost(\n    input_tokens: int,\n    output_tokens: int,\n    agent_type: str = \"claude\"\n) -&gt; float:\n    \"\"\"\n    Calculate token usage cost.\n\n    Args:\n        input_tokens: Number of input tokens\n        output_tokens: Number of output tokens\n        agent_type: Type of AI agent\n\n    Returns:\n        Cost in USD\n\n    Raises:\n        ValueError: If agent_type is unknown\n    \"\"\"\n    if agent_type not in TOKEN_COSTS:\n        raise ValueError(f\"Unknown agent: {agent_type}\")\n\n    rates = TOKEN_COSTS[agent_type]\n    cost = (input_tokens * rates[\"input\"] + \n            output_tokens * rates[\"output\"]) / 1_000_000\n    return round(cost, 4)\n</code></pre></p>"},{"location":"contributing/#testing-guidelines","title":"Testing Guidelines","text":"<p>All new features require tests:</p> <ol> <li>Unit tests for individual functions</li> <li>Integration tests for workflows</li> <li>Edge cases and error conditions</li> <li>Documentation of test purpose</li> </ol> <p>Test Example: <pre><code>def test_calculate_cost():\n    \"\"\"Test cost calculation for different agents.\"\"\"\n    # Test Claude pricing\n    cost = calculate_cost(1000, 500, \"claude\")\n    assert cost == 0.0105\n\n    # Test invalid agent\n    with pytest.raises(ValueError):\n        calculate_cost(1000, 500, \"invalid\")\n\n    # Test edge case: zero tokens\n    cost = calculate_cost(0, 0, \"claude\")\n    assert cost == 0.0\n</code></pre></p>"},{"location":"contributing/#commit-message-convention","title":"Commit Message Convention","text":"<p>We use Conventional Commits:</p> <ul> <li><code>feat:</code> New feature</li> <li><code>fix:</code> Bug fix</li> <li><code>docs:</code> Documentation changes</li> <li><code>test:</code> Test additions/changes</li> <li><code>refactor:</code> Code refactoring</li> <li><code>style:</code> Code style changes</li> <li><code>chore:</code> Maintenance tasks</li> <li><code>perf:</code> Performance improvements</li> </ul> <p>Examples: <pre><code>feat: add Gemini agent support\nfix: resolve token overflow in long prompts\ndocs: update installation guide for Windows\ntest: add integration tests for checkpointing\nrefactor: extract prompt validation logic\n</code></pre></p>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Title: Use conventional commit format</li> <li>Description: Explain what and why</li> <li>Testing: Describe testing performed</li> <li>Screenshots: Include if UI changes</li> <li>Checklist: Complete PR template</li> </ol> <p>PR Template: <pre><code>## Description\nBrief description of changes\n\n## Type of Change\n- [ ] Bug fix\n- [ ] New feature\n- [ ] Documentation update\n- [ ] Performance improvement\n\n## Testing\n- [ ] All tests pass\n- [ ] Added new tests\n- [ ] Manual testing performed\n\n## Checklist\n- [ ] Code follows style guidelines\n- [ ] Self-reviewed code\n- [ ] Updated documentation\n- [ ] No breaking changes\n</code></pre></p>"},{"location":"contributing/#project-structure","title":"Project Structure","text":"<pre><code>ralph-orchestrator/\n\u251c\u2500\u2500 ralph_orchestrator.py   # Main orchestrator\n\u251c\u2500\u2500 ralph                   # CLI wrapper\n\u251c\u2500\u2500 tests/                  # Test files\n\u2502   \u251c\u2500\u2500 test_orchestrator.py\n\u2502   \u251c\u2500\u2500 test_integration.py\n\u2502   \u2514\u2500\u2500 test_production.py\n\u251c\u2500\u2500 docs/                   # Documentation\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u251c\u2500\u2500 guide/\n\u2502   \u2514\u2500\u2500 api/\n\u251c\u2500\u2500 examples/               # Example prompts\n\u251c\u2500\u2500 .agent/                 # Runtime data\n\u2514\u2500\u2500 .github/               # GitHub configs\n</code></pre>"},{"location":"contributing/#testing","title":"Testing","text":""},{"location":"contributing/#run-tests","title":"Run Tests","text":"<pre><code># All tests\npytest\n\n# With coverage\npytest --cov=ralph_orchestrator\n\n# Specific test file\npytest test_orchestrator.py\n\n# Verbose output\npytest -v\n\n# Stop on first failure\npytest -x\n</code></pre>"},{"location":"contributing/#test-categories","title":"Test Categories","text":"<ol> <li>Unit Tests: Test individual functions</li> <li>Integration Tests: Test component interaction</li> <li>E2E Tests: Test complete workflows</li> <li>Performance Tests: Test resource usage</li> <li>Security Tests: Test input validation</li> </ol>"},{"location":"contributing/#documentation","title":"Documentation","text":""},{"location":"contributing/#building-docs-locally","title":"Building Docs Locally","text":"<pre><code># Install MkDocs\npip install mkdocs mkdocs-material\n\n# Serve locally\nmkdocs serve\n\n# Build static site\nmkdocs build\n</code></pre>"},{"location":"contributing/#documentation-standards","title":"Documentation Standards","text":"<ul> <li>Clear, concise language</li> <li>Code examples for all features</li> <li>Explain the \"why\" not just \"how\"</li> <li>Keep examples up-to-date</li> <li>Include troubleshooting tips</li> </ul>"},{"location":"contributing/#release-process","title":"Release Process","text":"<ol> <li>Version Bump: Update version in code</li> <li>Changelog: Update CHANGELOG.md</li> <li>Tests: Ensure all tests pass</li> <li>Documentation: Update if needed</li> <li>Tag: Create version tag</li> <li>Release: Create GitHub release</li> </ol>"},{"location":"contributing/#getting-help","title":"Getting Help","text":""},{"location":"contributing/#for-contributors","title":"For Contributors","text":"<ul> <li>\ud83d\udcac Discord Server</li> <li>\ud83d\udce7 Email Maintainers</li> <li>\ud83d\udde3\ufe0f GitHub Discussions</li> </ul>"},{"location":"contributing/#resources","title":"Resources","text":"<ul> <li>Development Setup Video</li> <li>Architecture Overview</li> <li>API Documentation</li> <li>Testing Guide</li> </ul>"},{"location":"contributing/#recognition","title":"Recognition","text":"<p>Contributors are recognized in:</p> <ul> <li>CONTRIBUTORS.md</li> <li>Release notes</li> <li>Documentation credits</li> </ul>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing, you agree that your contributions will be licensed under the MIT License.</p> <p>Thank you for contributing to Ralph Orchestrator! \ud83c\udf89</p>"},{"location":"installation/","title":"Installation Guide","text":"<p>Comprehensive installation instructions for Ralph Orchestrator.</p>"},{"location":"installation/#system-requirements","title":"System Requirements","text":""},{"location":"installation/#minimum-requirements","title":"Minimum Requirements","text":"<ul> <li>Python: 3.8 or higher</li> <li>Memory: 512 MB RAM</li> <li>Disk: 100 MB free space</li> <li>OS: Linux, macOS, or Windows</li> </ul>"},{"location":"installation/#recommended-requirements","title":"Recommended Requirements","text":"<ul> <li>Python: 3.10 or higher</li> <li>Memory: 2 GB RAM</li> <li>Disk: 1 GB free space</li> <li>Git: For checkpoint features</li> <li>Network: Stable internet connection</li> </ul>"},{"location":"installation/#installation-methods","title":"Installation Methods","text":""},{"location":"installation/#method-1-git-clone-recommended","title":"Method 1: Git Clone (Recommended)","text":"<pre><code># Clone the repository\ngit clone https://github.com/mikeyobrien/ralph-orchestrator.git\ncd ralph-orchestrator\n\n# Make the orchestrator executable\nchmod +x ralph_orchestrator.py\nchmod +x ralph\n\n# Install optional dependencies\npip install psutil  # For system metrics\n</code></pre>"},{"location":"installation/#method-2-direct-download","title":"Method 2: Direct Download","text":"<pre><code># Download the latest release\nwget https://github.com/mikeyobrien/ralph-orchestrator/archive/refs/tags/v1.0.0.tar.gz\n\n# Extract the archive\ntar -xzf v1.0.0.tar.gz\ncd ralph-orchestrator-1.0.0\n\n# Make executable\nchmod +x ralph_orchestrator.py\n</code></pre>"},{"location":"installation/#method-3-pip-install-coming-soon","title":"Method 3: pip Install (Coming Soon)","text":"<pre><code># Future installation via pip\npip install ralph-orchestrator\n</code></pre>"},{"location":"installation/#ai-agent-installation","title":"AI Agent Installation","text":"<p>Ralph requires at least one AI agent to function. Choose and install one or more:</p>"},{"location":"installation/#claude-anthropic","title":"Claude (Anthropic)","text":"<p>Claude is the recommended agent for most use cases.</p> <pre><code># Install via npm\nnpm install -g @anthropic-ai/claude-code\n\n# Or download from\n# https://claude.ai/code\n\n# Verify installation\nclaude --version\n</code></pre> <p>Configuration: <pre><code># Set your API key (if required)\nexport ANTHROPIC_API_KEY=\"your-api-key-here\"\n</code></pre></p>"},{"location":"installation/#q-chat","title":"Q Chat","text":"<p>Q Chat is a lightweight alternative agent.</p> <pre><code># Install via pip\npip install q-cli\n\n# Or clone from repository\ngit clone https://github.com/qchat/qchat.git\ncd qchat\npython setup.py install\n\n# Verify installation\nq --version\n</code></pre> <p>Configuration: <pre><code># Configure Q Chat\nq config --set api_key=\"your-api-key\"\n</code></pre></p>"},{"location":"installation/#gemini-google","title":"Gemini (Google)","text":"<p>Gemini provides access to Google's AI models.</p> <pre><code># Install via npm\nnpm install -g @google/gemini-cli\n\n# Verify installation\ngemini --version\n</code></pre> <p>Configuration: <pre><code># Set your API key\nexport GEMINI_API_KEY=\"your-api-key-here\"\n\n# Or use config file\ngemini config set api_key \"your-api-key\"\n</code></pre></p>"},{"location":"installation/#dependency-installation","title":"Dependency Installation","text":""},{"location":"installation/#required-python-packages","title":"Required Python Packages","text":"<p>Ralph Orchestrator has minimal dependencies, but some features require additional packages:</p> <pre><code># Core functionality (no additional packages needed)\n# Ralph uses only Python standard library for core features\n\n# Optional: System metrics monitoring\npip install psutil\n\n# Optional: Enhanced JSON handling\npip install orjson  # Faster JSON processing\n\n# Optional: Development dependencies\npip install pytest pytest-cov black ruff\n</code></pre>"},{"location":"installation/#using-requirementstxt","title":"Using requirements.txt","text":"<p>If you want to install all optional dependencies:</p> <pre><code># Create requirements.txt\ncat &gt; requirements.txt &lt;&lt; EOF\npsutil&gt;=5.9.0\norjson&gt;=3.9.0\npytest&gt;=7.0.0\npytest-cov&gt;=4.0.0\nblack&gt;=23.0.0\nruff&gt;=0.1.0\nEOF\n\n# Install all dependencies\npip install -r requirements.txt\n</code></pre>"},{"location":"installation/#using-uv-recommended-for-development","title":"Using uv (Recommended for Development)","text":"<pre><code># Install uv\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Install dependencies with uv\nuv pip install psutil orjson\n\n# Or use pyproject.toml\nuv sync\n</code></pre>"},{"location":"installation/#verification","title":"Verification","text":""},{"location":"installation/#verify-installation","title":"Verify Installation","text":"<p>Run these commands to verify your installation:</p> <pre><code># Check Python version\npython --version  # Should be 3.8+\n\n# Check Ralph Orchestrator\npython ralph_orchestrator.py --version\n\n# Check for available agents\npython ralph_orchestrator.py --list-agents\n\n# Run a test\necho \"Say hello and add TASK_COMPLETE\" &gt; test.md\npython ralph_orchestrator.py --prompt test.md --dry-run\n</code></pre>"},{"location":"installation/#expected-output","title":"Expected Output","text":"<pre><code>Ralph Orchestrator v1.0.0\nPython 3.10.12\nAvailable agents: claude, q, gemini\nDry run completed successfully\n</code></pre>"},{"location":"installation/#platform-specific-instructions","title":"Platform-Specific Instructions","text":""},{"location":"installation/#linux","title":"Linux","text":"<pre><code># Ubuntu/Debian\nsudo apt update\nsudo apt install python3 python3-pip git\n\n# Fedora/RHEL\nsudo dnf install python3 python3-pip git\n\n# Arch Linux\nsudo pacman -S python python-pip git\n</code></pre>"},{"location":"installation/#macos","title":"macOS","text":"<pre><code># Using Homebrew\nbrew install python git\n\n# Using MacPorts\nsudo port install python310 git\n\n# Verify Python installation\npython3 --version\n</code></pre>"},{"location":"installation/#windows","title":"Windows","text":"<pre><code># Using PowerShell as Administrator\n\n# Install Python from Microsoft Store\nwinget install Python.Python.3.11\n\n# Or download from python.org\n# https://www.python.org/downloads/windows/\n\n# Install Git\nwinget install Git.Git\n\n# Clone Ralph\ngit clone https://github.com/mikeyobrien/ralph-orchestrator.git\ncd ralph-orchestrator\n\n# Run Ralph\npython ralph_orchestrator.py --prompt PROMPT.md\n</code></pre>"},{"location":"installation/#docker-alternative","title":"Docker (Alternative)","text":"<pre><code># Dockerfile\nFROM python:3.11-slim\n\nWORKDIR /app\nCOPY . /app\n\nRUN pip install psutil\n\n# Install your preferred AI agent\nRUN npm install -g @anthropic-ai/claude-code\n\nCMD [\"python\", \"ralph_orchestrator.py\"]\n</code></pre> <pre><code># Build and run\ndocker build -t ralph-orchestrator .\ndocker run -v $(pwd):/app ralph-orchestrator --prompt PROMPT.md\n</code></pre>"},{"location":"installation/#configuration-files","title":"Configuration Files","text":""},{"location":"installation/#basic-configuration","title":"Basic Configuration","text":"<p>Create a configuration file for default settings:</p> <pre><code># Create .ralph.conf\ncat &gt; .ralph.conf &lt;&lt; EOF\n# Default Ralph Configuration\nagent=claude\nmax_iterations=100\nmax_runtime=14400\ncheckpoint_interval=5\nverbose=false\nEOF\n</code></pre>"},{"location":"installation/#environment-variables","title":"Environment Variables","text":"<p>Set environment variables for common settings:</p> <pre><code># Add to your ~/.bashrc or ~/.zshrc\nexport RALPH_AGENT=\"claude\"\nexport RALPH_MAX_ITERATIONS=\"100\"\nexport RALPH_MAX_COST=\"50.0\"\nexport RALPH_VERBOSE=\"false\"\n</code></pre>"},{"location":"installation/#troubleshooting-installation","title":"Troubleshooting Installation","text":""},{"location":"installation/#common-issues","title":"Common Issues","text":""},{"location":"installation/#python-version-too-old","title":"Python Version Too Old","text":"<pre><code>ERROR: Python 3.8+ required, found 3.7.3\n</code></pre> <p>Solution: Upgrade Python <pre><code># Ubuntu/Debian\nsudo apt install python3.10\n\n# macOS\nbrew upgrade python\n\n# Windows\nwinget upgrade Python.Python.3.11\n</code></pre></p>"},{"location":"installation/#agent-not-found","title":"Agent Not Found","text":"<pre><code>ERROR: No AI agents detected\n</code></pre> <p>Solution: Install at least one agent <pre><code>npm install -g @anthropic-ai/claude-code\n# or\npip install q-cli\n</code></pre></p>"},{"location":"installation/#permission-denied","title":"Permission Denied","text":"<pre><code>Permission denied: './ralph_orchestrator.py'\n</code></pre> <p>Solution: Make executable <pre><code>chmod +x ralph_orchestrator.py\nchmod +x ralph\n</code></pre></p>"},{"location":"installation/#module-not-found","title":"Module Not Found","text":"<pre><code>ModuleNotFoundError: No module named 'psutil'\n</code></pre> <p>Solution: Install optional dependencies <pre><code>pip install psutil\n</code></pre></p>"},{"location":"installation/#uninstallation","title":"Uninstallation","text":"<p>To remove Ralph Orchestrator:</p> <pre><code># Remove the directory\nrm -rf ralph-orchestrator\n\n# Uninstall optional dependencies\npip uninstall psutil orjson\n\n# Remove configuration files\nrm ~/.ralph.conf\n</code></pre>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<p>After installation:</p> <ol> <li>Read the Quick Start Guide</li> <li>Configure your AI Agents</li> <li>Learn about Configuration Options</li> <li>Try the Examples</li> </ol>"},{"location":"installation/#getting-help","title":"Getting Help","text":"<p>If you encounter issues:</p> <ul> <li>Check the FAQ</li> <li>Read Troubleshooting</li> <li>Open an issue on GitHub</li> <li>Join the discussions</li> </ul> <p>\ud83d\udcda Continue to the User Guide \u2192</p>"},{"location":"quick-start/","title":"Quick Start Guide","text":"<p>Get Ralph Orchestrator up and running in 5 minutes!</p>"},{"location":"quick-start/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have:</p> <ul> <li>Python 3.8 or higher</li> <li>Git (for checkpointing features)</li> <li>At least one AI CLI tool installed</li> </ul>"},{"location":"quick-start/#step-1-install-an-ai-agent","title":"Step 1: Install an AI Agent","text":"<p>Ralph works with multiple AI agents. Install at least one:</p> Claude (Recommended)Q ChatGemini <pre><code>npm install -g @anthropic-ai/claude-code\n# Or visit https://claude.ai/code for setup instructions\n</code></pre> <pre><code>pip install q-cli\n# Or follow instructions at https://github.com/qchat/qchat\n</code></pre> <pre><code>npm install -g @google/gemini-cli\n# Configure with your API key\n</code></pre>"},{"location":"quick-start/#step-2-clone-ralph-orchestrator","title":"Step 2: Clone Ralph Orchestrator","text":"<pre><code># Clone the repository\ngit clone https://github.com/mikeyobrien/ralph-orchestrator.git\ncd ralph-orchestrator\n\n# Install optional dependencies for monitoring\npip install psutil  # Recommended for system metrics\n</code></pre>"},{"location":"quick-start/#step-3-create-your-first-task","title":"Step 3: Create Your First Task","text":"<p>Create a <code>PROMPT.md</code> file with your task:</p> <pre><code># Task: Create a Todo List CLI\n\nBuild a Python command-line todo list application with:\n- Add tasks\n- List tasks\n- Mark tasks as complete\n- Save tasks to a JSON file\n\nInclude proper error handling and a help command.\n\nWhen the implementation is complete and tested, add \"TASK_COMPLETE\" to this file.\n</code></pre>"},{"location":"quick-start/#step-4-run-ralph","title":"Step 4: Run Ralph","text":"<pre><code># Basic execution (auto-detects available agent)\npython ralph_orchestrator.py --prompt PROMPT.md\n\n# Or specify an agent explicitly\npython ralph_orchestrator.py --agent claude --prompt PROMPT.md\n</code></pre>"},{"location":"quick-start/#step-5-monitor-progress","title":"Step 5: Monitor Progress","text":"<p>Ralph will now: 1. Read your prompt file 2. Execute the AI agent 3. Check for completion 4. Iterate until done or limits reached</p> <p>You'll see output like: <pre><code>2025-09-08 10:30:45 - INFO - Starting Ralph Orchestrator v1.0.0\n2025-09-08 10:30:45 - INFO - Using agent: claude\n2025-09-08 10:30:45 - INFO - Starting iteration 1/100\n2025-09-08 10:30:52 - INFO - Iteration 1 complete\n2025-09-08 10:30:52 - INFO - Task not complete, continuing...\n</code></pre></p>"},{"location":"quick-start/#what-happens-next","title":"What Happens Next?","text":"<p>Ralph will continue iterating until one of these conditions is met:</p> <ul> <li>\u2705 The task is marked complete (TASK_COMPLETE found in prompt)</li> <li>\u23f1\ufe0f Maximum iterations reached (default: 100)</li> <li>\u23f0 Maximum runtime exceeded (default: 4 hours)</li> <li>\ud83d\udcb0 Token or cost limits reached</li> <li>\u274c Unrecoverable error occurs</li> </ul>"},{"location":"quick-start/#basic-configuration","title":"Basic Configuration","text":"<p>Control Ralph's behavior with command-line options:</p> <pre><code># Limit iterations\npython ralph_orchestrator.py --prompt PROMPT.md --max-iterations 50\n\n# Set cost limit\npython ralph_orchestrator.py --prompt PROMPT.md --max-cost 10.0\n\n# Enable verbose logging\npython ralph_orchestrator.py --prompt PROMPT.md --verbose\n\n# Dry run (test without executing)\npython ralph_orchestrator.py --prompt PROMPT.md --dry-run\n</code></pre>"},{"location":"quick-start/#example-tasks","title":"Example Tasks","text":""},{"location":"quick-start/#simple-function","title":"Simple Function","text":"<pre><code>Write a Python function that validates email addresses using regex.\nInclude comprehensive unit tests.\n</code></pre>"},{"location":"quick-start/#web-scraper","title":"Web Scraper","text":"<pre><code>Create a web scraper that:\n1. Fetches the HackerNews homepage\n2. Extracts the top 10 stories\n3. Saves them to a JSON file\nUse requests and BeautifulSoup.\n</code></pre>"},{"location":"quick-start/#cli-tool","title":"CLI Tool","text":"<pre><code>Build a markdown to HTML converter CLI tool:\n- Accept input/output file arguments\n- Support basic markdown syntax\n- Add --watch mode for auto-conversion\n</code></pre>"},{"location":"quick-start/#next-steps","title":"Next Steps","text":"<p>Now that you've run your first Ralph task:</p> <ul> <li>\ud83d\udcd6 Read the User Guide for detailed configuration</li> <li>\ud83d\udd12 Learn about Security Features</li> <li>\ud83d\udcb0 Understand Cost Management</li> <li>\ud83d\udcca Set up Monitoring</li> <li>\ud83d\ude80 Deploy to Production</li> </ul>"},{"location":"quick-start/#troubleshooting","title":"Troubleshooting","text":""},{"location":"quick-start/#agent-not-found","title":"Agent Not Found","text":"<p>If Ralph can't find an AI agent: <pre><code>ERROR: No AI agents detected. Please install claude, q, or gemini.\n</code></pre></p> <p>Solution: Install one of the supported agents (see Step 1)</p>"},{"location":"quick-start/#permission-denied","title":"Permission Denied","text":"<p>If you get permission errors: <pre><code>chmod +x ralph_orchestrator.py\n</code></pre></p>"},{"location":"quick-start/#task-not-completing","title":"Task Not Completing","text":"<p>If your task runs indefinitely: - Check that your prompt includes clear completion criteria - Ensure the agent can add \"TASK_COMPLETE\" to the prompt file - Review iteration logs in <code>.agent/metrics/</code></p>"},{"location":"quick-start/#getting-help","title":"Getting Help","text":"<ul> <li>Check the FAQ</li> <li>Read the Troubleshooting Guide</li> <li>Open an issue on GitHub</li> <li>Join the discussions</li> </ul> <p>\ud83c\udf89 Congratulations! You've successfully run your first Ralph orchestration!</p>"},{"location":"api/orchestrator/","title":"Orchestrator API Reference","text":"<p>Complete API documentation for the Ralph Orchestrator core module.</p>"},{"location":"api/orchestrator/#module-ralph_orchestrator","title":"Module: <code>ralph_orchestrator</code>","text":"<p>The main orchestration module that coordinates AI agent execution.</p>"},{"location":"api/orchestrator/#classes","title":"Classes","text":""},{"location":"api/orchestrator/#ralphorchestrator","title":"<code>RalphOrchestrator</code>","text":"<p>Main orchestrator class managing the execution loop.</p> <pre><code>class RalphOrchestrator:\n    def __init__(self, config: RalphConfig):\n        \"\"\"Initialize the orchestrator with configuration.\"\"\"\n</code></pre>"},{"location":"api/orchestrator/#methods","title":"Methods","text":""},{"location":"api/orchestrator/#run","title":"<code>run()</code>","text":"<pre><code>def run(self) -&gt; Dict[str, Any]:\n    \"\"\"\n    Run the orchestration loop until completion or limits reached.\n\n    Returns:\n        Dict containing final metrics and status\n    \"\"\"\n</code></pre>"},{"location":"api/orchestrator/#ralphconfig","title":"<code>RalphConfig</code>","text":"<p>Configuration dataclass for the orchestrator.</p> <pre><code>@dataclass\nclass RalphConfig:\n    agent: AgentType = AgentType.AUTO\n    prompt_file: str = \"PROMPT.md\"\n    max_iterations: int = 100\n    max_runtime: int = 14400\n    # ... additional fields\n</code></pre>"},{"location":"api/orchestrator/#agenttype","title":"<code>AgentType</code>","text":"<pre><code>class AgentType(Enum):\n    CLAUDE = \"claude\"\n    Q = \"q\"\n    GEMINI = \"gemini\"\n    AUTO = \"auto\"\n</code></pre>"},{"location":"api/orchestrator/#functions","title":"Functions","text":""},{"location":"api/orchestrator/#main","title":"<code>main()</code>","text":"<p>Entry point for CLI execution.</p> <pre><code>def main() -&gt; int:\n    \"\"\"Main entry point for CLI execution.\"\"\"\n</code></pre>"},{"location":"api/orchestrator/#detect_agent","title":"<code>detect_agent()</code>","text":"<pre><code>def detect_agent() -&gt; Optional[AgentType]:\n    \"\"\"Detect available AI agent.\"\"\"\n</code></pre>"},{"location":"api/orchestrator/#usage-examples","title":"Usage Examples","text":"<pre><code>from ralph_orchestrator import RalphOrchestrator, RalphConfig\n\nconfig = RalphConfig(agent=AgentType.CLAUDE)\norchestrator = RalphOrchestrator(config)\nresult = orchestrator.run()\n</code></pre> <p>The main orchestration module that implements the Ralph Wiggum technique.</p>"},{"location":"api/orchestrator/#classes_1","title":"Classes","text":""},{"location":"api/orchestrator/#ralphorchestrator_1","title":"<code>RalphOrchestrator</code>","text":"<p>The main orchestrator class that manages the iteration loop.</p> <pre><code>class RalphOrchestrator:\n    \"\"\"\n    Orchestrates AI agent iterations for autonomous task completion.\n\n    Attributes:\n        config (RalphConfig): Configuration object\n        agent (Agent): Active AI agent instance\n        metrics (MetricsCollector): Metrics tracking\n        state (OrchestratorState): Current state\n    \"\"\"\n</code></pre>"},{"location":"api/orchestrator/#constructor","title":"Constructor","text":"<pre><code>def __init__(self, config: RalphConfig) -&gt; None:\n    \"\"\"\n    Initialize the orchestrator with configuration.\n\n    Args:\n        config: RalphConfig object with settings\n\n    Raises:\n        ValueError: If configuration is invalid\n        RuntimeError: If no agents are available\n    \"\"\"\n</code></pre>"},{"location":"api/orchestrator/#methods_1","title":"Methods","text":""},{"location":"api/orchestrator/#run_1","title":"<code>run()</code>","text":"<pre><code>def run(self) -&gt; int:\n    \"\"\"\n    Execute the main orchestration loop.\n\n    Returns:\n        int: Exit code (0 for success, non-zero for failure)\n\n    Raises:\n        SecurityError: If security validation fails\n        RuntimeError: If unrecoverable error occurs\n    \"\"\"\n</code></pre>"},{"location":"api/orchestrator/#iterate","title":"<code>iterate()</code>","text":"<pre><code>def iterate(self) -&gt; bool:\n    \"\"\"\n    Execute a single iteration.\n\n    Returns:\n        bool: True if task is complete, False otherwise\n\n    Raises:\n        AgentError: If agent execution fails\n        TokenLimitError: If token limit exceeded\n        CostLimitError: If cost limit exceeded\n    \"\"\"\n</code></pre>"},{"location":"api/orchestrator/#checkpoint","title":"<code>checkpoint()</code>","text":"<pre><code>def checkpoint(self) -&gt; None:\n    \"\"\"\n    Create a Git checkpoint of current state.\n\n    Raises:\n        GitError: If Git operations fail\n    \"\"\"\n</code></pre>"},{"location":"api/orchestrator/#save_state","title":"<code>save_state()</code>","text":"<pre><code>def save_state(self) -&gt; None:\n    \"\"\"\n    Persist current state to disk.\n\n    The state includes:\n    - Current iteration number\n    - Token usage\n    - Cost accumulation\n    - Timestamps\n    - Agent information\n    \"\"\"\n</code></pre>"},{"location":"api/orchestrator/#load_state","title":"<code>load_state()</code>","text":"<pre><code>def load_state(self) -&gt; Optional[OrchestratorState]:\n    \"\"\"\n    Load previous state from disk.\n\n    Returns:\n        OrchestratorState or None if no state exists\n    \"\"\"\n</code></pre>"},{"location":"api/orchestrator/#ralphconfig_1","title":"<code>RalphConfig</code>","text":"<p>Configuration dataclass for the orchestrator.</p> <pre><code>@dataclass\nclass RalphConfig:\n    \"\"\"\n    Configuration for Ralph orchestrator.\n\n    All parameters can be set via:\n    - Command-line arguments\n    - Environment variables (RALPH_*)\n    - Configuration file (.ralph.conf)\n    - Default values\n    \"\"\"\n\n    # Agent configuration\n    agent: AgentType = AgentType.AUTO\n    agent_args: List[str] = field(default_factory=list)\n\n    # File paths\n    prompt_file: str = \"PROMPT.md\"\n\n    # Iteration limits\n    max_iterations: int = 100\n    max_runtime: int = 14400  # 4 hours\n\n    # Token and cost limits\n    max_tokens: int = 1000000  # 1M tokens\n    max_cost: float = 50.0  # $50 USD\n\n    # Context management\n    context_window: int = 200000  # 200K tokens\n    context_threshold: float = 0.8  # 80% trigger\n\n    # Checkpointing\n    checkpoint_interval: int = 5\n    git_checkpoint: bool = True\n    archive_prompts: bool = True\n\n    # Retry configuration\n    retry_delay: int = 2\n    max_retries: int = 3\n\n    # Monitoring\n    metrics_interval: int = 10\n    enable_metrics: bool = True\n\n    # Security\n    max_prompt_size: int = 10485760  # 10MB\n    allow_unsafe_paths: bool = False\n\n    # Output\n    verbose: bool = False\n    dry_run: bool = False\n</code></pre>"},{"location":"api/orchestrator/#orchestratorstate","title":"<code>OrchestratorState</code>","text":"<p>State tracking for the orchestrator.</p> <pre><code>@dataclass\nclass OrchestratorState:\n    \"\"\"\n    Orchestrator state for persistence and recovery.\n    \"\"\"\n\n    # Iteration tracking\n    current_iteration: int = 0\n    total_iterations: int = 0\n\n    # Time tracking\n    start_time: datetime = field(default_factory=datetime.now)\n    last_iteration_time: Optional[datetime] = None\n    total_runtime: float = 0.0\n\n    # Token tracking\n    total_input_tokens: int = 0\n    total_output_tokens: int = 0\n\n    # Cost tracking\n    total_cost: float = 0.0\n\n    # Agent information\n    agent_type: str = \"\"\n    agent_version: Optional[str] = None\n\n    # Completion status\n    is_complete: bool = False\n    completion_reason: Optional[str] = None\n</code></pre>"},{"location":"api/orchestrator/#functions_1","title":"Functions","text":""},{"location":"api/orchestrator/#detect_agents","title":"<code>detect_agents()</code>","text":"<pre><code>def detect_agents() -&gt; List[AgentType]:\n    \"\"\"\n    Detect available AI agents on the system.\n\n    Returns:\n        List of available AgentType enums\n\n    Example:\n        &gt;&gt;&gt; detect_agents()\n        [AgentType.CLAUDE, AgentType.GEMINI]\n    \"\"\"\n</code></pre>"},{"location":"api/orchestrator/#validate_prompt_file","title":"<code>validate_prompt_file()</code>","text":"<pre><code>def validate_prompt_file(\n    file_path: str, \n    max_size: int = DEFAULT_MAX_PROMPT_SIZE\n) -&gt; None:\n    \"\"\"\n    Validate prompt file for security and size.\n\n    Args:\n        file_path: Path to prompt file\n        max_size: Maximum allowed file size in bytes\n\n    Raises:\n        FileNotFoundError: If file doesn't exist\n        SecurityError: If file contains dangerous patterns\n        ValueError: If file exceeds size limit\n    \"\"\"\n</code></pre>"},{"location":"api/orchestrator/#sanitize_input","title":"<code>sanitize_input()</code>","text":"<pre><code>def sanitize_input(text: str) -&gt; str:\n    \"\"\"\n    Sanitize input text for security.\n\n    Args:\n        text: Input text to sanitize\n\n    Returns:\n        Sanitized text safe for processing\n\n    Example:\n        &gt;&gt;&gt; sanitize_input(\"rm -rf /; echo 'done'\")\n        \"rm -rf _; echo 'done'\"\n    \"\"\"\n</code></pre>"},{"location":"api/orchestrator/#calculate_cost","title":"<code>calculate_cost()</code>","text":"<pre><code>def calculate_cost(\n    input_tokens: int,\n    output_tokens: int,\n    agent_type: AgentType\n) -&gt; float:\n    \"\"\"\n    Calculate cost based on token usage.\n\n    Args:\n        input_tokens: Number of input tokens\n        output_tokens: Number of output tokens\n        agent_type: Type of agent used\n\n    Returns:\n        Cost in USD\n\n    Example:\n        &gt;&gt;&gt; calculate_cost(1000, 500, AgentType.CLAUDE)\n        0.0105  # $0.0105\n    \"\"\"\n</code></pre>"},{"location":"api/orchestrator/#exceptions","title":"Exceptions","text":""},{"location":"api/orchestrator/#orchestratorerror","title":"<code>OrchestratorError</code>","text":"<p>Base exception for orchestrator errors.</p> <pre><code>class OrchestratorError(Exception):\n    \"\"\"Base exception for orchestrator errors.\"\"\"\n    pass\n</code></pre>"},{"location":"api/orchestrator/#securityerror","title":"<code>SecurityError</code>","text":"<pre><code>class SecurityError(OrchestratorError):\n    \"\"\"Raised when security validation fails.\"\"\"\n    pass\n</code></pre>"},{"location":"api/orchestrator/#tokenlimiterror","title":"<code>TokenLimitError</code>","text":"<pre><code>class TokenLimitError(OrchestratorError):\n    \"\"\"Raised when token limit is exceeded.\"\"\"\n    pass\n</code></pre>"},{"location":"api/orchestrator/#costlimiterror","title":"<code>CostLimitError</code>","text":"<pre><code>class CostLimitError(OrchestratorError):\n    \"\"\"Raised when cost limit is exceeded.\"\"\"\n    pass\n</code></pre>"},{"location":"api/orchestrator/#agenterror","title":"<code>AgentError</code>","text":"<pre><code>class AgentError(OrchestratorError):\n    \"\"\"Raised when agent execution fails.\"\"\"\n    pass\n</code></pre>"},{"location":"api/orchestrator/#constants","title":"Constants","text":"<pre><code># Version\nVERSION = \"1.0.0\"\n\n# Default values\nDEFAULT_MAX_ITERATIONS = 100\nDEFAULT_MAX_RUNTIME = 14400  # 4 hours\nDEFAULT_PROMPT_FILE = \"PROMPT.md\"\nDEFAULT_CHECKPOINT_INTERVAL = 5\nDEFAULT_RETRY_DELAY = 2\nDEFAULT_MAX_TOKENS = 1000000  # 1M tokens\nDEFAULT_MAX_COST = 50.0  # $50 USD\nDEFAULT_CONTEXT_WINDOW = 200000  # 200K tokens\nDEFAULT_CONTEXT_THRESHOLD = 0.8  # 80%\nDEFAULT_METRICS_INTERVAL = 10\nDEFAULT_MAX_PROMPT_SIZE = 10485760  # 10MB\n\n# Token costs per million\nTOKEN_COSTS = {\n    \"claude\": {\"input\": 3.0, \"output\": 15.0},\n    \"q\": {\"input\": 0.5, \"output\": 1.5},\n    \"gemini\": {\"input\": 0.5, \"output\": 1.5}\n}\n\n# Completion markers\nCOMPLETION_MARKERS = [\"TASK_COMPLETE\", \"TASK_DONE\", \"COMPLETE\"]\n\n# Security patterns\nDANGEROUS_PATTERNS = [\n    r\"rm\\s+-rf\\s+/\",\n    r\":(){ :|:&amp; };:\",\n    r\"dd\\s+if=/dev/zero\",\n    r\"mkfs\\.\",\n    r\"format\\s+[cC]:\",\n]\n</code></pre>"},{"location":"api/orchestrator/#usage-examples_1","title":"Usage Examples","text":""},{"location":"api/orchestrator/#basic-usage","title":"Basic Usage","text":"<pre><code>from ralph_orchestrator import RalphOrchestrator, RalphConfig\n\n# Create configuration\nconfig = RalphConfig(\n    agent=AgentType.CLAUDE,\n    prompt_file=\"task.md\",\n    max_iterations=50,\n    max_cost=25.0\n)\n\n# Initialize orchestrator\norchestrator = RalphOrchestrator(config)\n\n# Run orchestration\nexit_code = orchestrator.run()\n</code></pre>"},{"location":"api/orchestrator/#custom-configuration","title":"Custom Configuration","text":"<pre><code># Load from environment and add overrides\nconfig = RalphConfig()\nconfig.max_iterations = 100\nconfig.checkpoint_interval = 10\nconfig.verbose = True\n\n# Initialize with custom config\norchestrator = RalphOrchestrator(config)\n</code></pre>"},{"location":"api/orchestrator/#state-management","title":"State Management","text":"<pre><code># Save state manually\norchestrator.save_state()\n\n# Load previous state\nstate = orchestrator.load_state()\nif state:\n    print(f\"Resuming from iteration {state.current_iteration}\")\n</code></pre>"},{"location":"api/orchestrator/#error-handling","title":"Error Handling","text":"<pre><code>try:\n    orchestrator = RalphOrchestrator(config)\n    exit_code = orchestrator.run()\nexcept SecurityError as e:\n    print(f\"Security violation: {e}\")\nexcept TokenLimitError as e:\n    print(f\"Token limit exceeded: {e}\")\nexcept CostLimitError as e:\n    print(f\"Cost limit exceeded: {e}\")\nexcept Exception as e:\n    print(f\"Unexpected error: {e}\")\n</code></pre>"},{"location":"api/orchestrator/#thread-safety","title":"Thread Safety","text":"<p>The orchestrator is not thread-safe. If you need concurrent execution:</p> <ol> <li>Create separate orchestrator instances</li> <li>Use different working directories</li> <li>Implement external synchronization</li> </ol>"},{"location":"api/orchestrator/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Memory usage: ~50MB base + agent overhead</li> <li>Disk I/O: Checkpoints create Git commits</li> <li>Network: Agent API calls may have latency</li> <li>CPU: Minimal overhead (&lt;1% between iterations)</li> </ul>"},{"location":"api/orchestrator/#see-also","title":"See Also","text":"<ul> <li>Configuration API</li> <li>Agent API</li> <li>Metrics API</li> <li>CLI Reference</li> </ul> <p>\ud83d\udcda Continue to Configuration API \u2192</p>"},{"location":"examples/","title":"Examples","text":"<p>Learn how to use Ralph Orchestrator through practical examples.</p>"},{"location":"examples/#quick-examples","title":"Quick Examples","text":""},{"location":"examples/#hello-world","title":"Hello World","text":"<p>The simplest possible Ralph task:</p> <pre><code># PROMPT.md\nWrite a Python function that prints \"Hello, World!\"\nSave it to hello.py and add TASK_COMPLETE when done.\n</code></pre> <p>Run with: <pre><code>python ralph_orchestrator.py --prompt PROMPT.md --max-iterations 5\n</code></pre></p>"},{"location":"examples/#basic-math-function","title":"Basic Math Function","text":"<p>Generate a calculator module:</p> <pre><code># PROMPT.md\nCreate a Python calculator module with:\n- Functions for add, subtract, multiply, divide\n- Error handling for division by zero\n- Docstrings for all functions\n- Save to calculator.py\n\nWhen complete, add TASK_COMPLETE.\n</code></pre>"},{"location":"examples/#complete-examples","title":"Complete Examples","text":"<p>Explore our detailed example guides:</p>"},{"location":"examples/#simple-task","title":"\ud83d\udcdd Simple Task","text":"<p>Build a command-line todo list application with file persistence.</p>"},{"location":"examples/#web-api","title":"\ud83c\udf10 Web API","text":"<p>Create a RESTful API with Flask, including authentication and database integration.</p>"},{"location":"examples/#cli-tool","title":"\ud83d\udee0\ufe0f CLI Tool","text":"<p>Develop a feature-rich command-line tool with argument parsing and configuration.</p>"},{"location":"examples/#data-analysis","title":"\ud83d\udcca Data Analysis","text":"<p>Process CSV data, generate statistics, and create visualizations.</p>"},{"location":"examples/#example-categories","title":"Example Categories","text":""},{"location":"examples/#code-generation","title":"Code Generation","text":"<p>Use Case: Automatically generate boilerplate code, utilities, or entire modules.</p> <pre><code>Create a Python logging utility with:\n- Colored console output\n- File rotation\n- JSON formatting option\n- Multiple log levels\n</code></pre>"},{"location":"examples/#testing","title":"Testing","text":"<p>Use Case: Generate comprehensive test suites for existing code.</p> <pre><code>Write pytest tests for the user_auth.py module:\n- Test all public functions\n- Include edge cases\n- Mock external dependencies\n- Aim for 100% coverage\n</code></pre>"},{"location":"examples/#documentation","title":"Documentation","text":"<p>Use Case: Create or update project documentation.</p> <pre><code>Generate comprehensive API documentation for this project:\n- Document all public classes and functions\n- Include usage examples\n- Create a getting started guide\n- Format as Markdown\n</code></pre>"},{"location":"examples/#refactoring","title":"Refactoring","text":"<p>Use Case: Improve code quality and structure.</p> <pre><code>Refactor the data_processor.py file:\n- Split large functions (&gt;50 lines)\n- Extract common patterns\n- Add type hints\n- Improve variable names\n- Maintain functionality\n</code></pre>"},{"location":"examples/#bug-fixing","title":"Bug Fixing","text":"<p>Use Case: Identify and fix issues in code.</p> <pre><code>Debug and fix the payment processing module:\n- The calculate_tax() function returns wrong values\n- Payment status isn't updating correctly\n- Add logging to trace the issue\n- Write tests to prevent regression\n</code></pre>"},{"location":"examples/#data-processing","title":"Data Processing","text":"<p>Use Case: Transform and analyze data files.</p> <pre><code>Process sales_data.csv:\n- Clean missing values\n- Calculate monthly totals\n- Find top 10 products\n- Generate summary statistics\n- Export results to report.json\n</code></pre>"},{"location":"examples/#best-practices-for-examples","title":"Best Practices for Examples","text":""},{"location":"examples/#1-clear-objectives","title":"1. Clear Objectives","text":"<p>Always specify exactly what you want:</p> <p>\u2705 Good: <pre><code>Create a REST API endpoint that:\n- Accepts POST requests to /api/users\n- Validates email and password\n- Returns JWT token on success\n- Uses SQLite for storage\n</code></pre></p> <p>\u274c Bad: <pre><code>Make a user API\n</code></pre></p>"},{"location":"examples/#2-include-constraints","title":"2. Include Constraints","text":"<p>Specify limitations and requirements:</p> <pre><code>Build a web scraper that:\n- Uses only standard library (no pip installs)\n- Respects robots.txt\n- Implements rate limiting (1 request/second)\n- Handles errors gracefully\n</code></pre>"},{"location":"examples/#3-define-success-criteria","title":"3. Define Success Criteria","text":"<p>Make completion conditions explicit:</p> <pre><code>Task is complete when:\n1. All tests pass (run: pytest test_calculator.py)\n2. Code follows PEP 8 (run: flake8 calculator.py)\n3. Documentation is complete\n4. TASK_COMPLETE is added to this file\n</code></pre>"},{"location":"examples/#4-provide-context","title":"4. Provide Context","text":"<p>Include relevant information:</p> <pre><code>Context: We're building a microservice for order processing.\nExisting files: models.py, database.py\n\nCreate an order validation module that:\n- Integrates with existing models\n- Validates against business rules\n- Returns detailed error messages\n</code></pre>"},{"location":"examples/#running-examples","title":"Running Examples","text":""},{"location":"examples/#basic-execution","title":"Basic Execution","text":"<pre><code># Run with default settings\npython ralph_orchestrator.py --prompt examples/simple-task.md\n</code></pre>"},{"location":"examples/#with-cost-limits","title":"With Cost Limits","text":"<pre><code># Limit spending\npython ralph_orchestrator.py \\\n  --prompt examples/web-api.md \\\n  --max-cost 5.0 \\\n  --max-tokens 100000\n</code></pre>"},{"location":"examples/#using-specific-agents","title":"Using Specific Agents","text":"<pre><code># Use Claude for complex tasks\npython ralph_orchestrator.py \\\n  --agent claude \\\n  --prompt examples/cli-tool.md\n\n# Use Gemini for research tasks\npython ralph_orchestrator.py \\\n  --agent gemini \\\n  --prompt examples/data-analysis.md\n</code></pre>"},{"location":"examples/#development-mode","title":"Development Mode","text":"<pre><code># Verbose output with frequent checkpoints\npython ralph_orchestrator.py \\\n  --prompt examples/simple-task.md \\\n  --verbose \\\n  --checkpoint-interval 1 \\\n  --max-iterations 10\n</code></pre>"},{"location":"examples/#example-prompt-templates","title":"Example Prompt Templates","text":""},{"location":"examples/#web-application","title":"Web Application","text":"<p><pre><code># Task: Create [Application Name]\n\n## Requirements\n- Framework: [Flask/FastAPI/Django]\n- Database: [SQLite/PostgreSQL/MongoDB]\n- Authentication: [JWT/Session/OAuth]\n\n## Features\n1. [Feature 1]\n2. [Feature 2]\n3. [Feature 3]\n\n## File Structure\n</code></pre> project/ \u251c\u2500\u2500 app.py \u251c\u2500\u2500 models.py \u251c\u2500\u2500 routes.py \u2514\u2500\u2500 tests/ <pre><code>## Completion Criteria\n- All endpoints working\n- Tests passing\n- Documentation complete\n- TASK_COMPLETE added\n</code></pre></p>"},{"location":"examples/#data-processing_1","title":"Data Processing","text":"<pre><code># Task: Process [Data Description]\n\n## Input\n- File: [filename.csv]\n- Format: [CSV/JSON/XML]\n- Size: [approximate size]\n\n## Processing Steps\n1. [Step 1: Load and validate]\n2. [Step 2: Clean and transform]\n3. [Step 3: Analyze]\n4. [Step 4: Export results]\n\n## Output\n- Format: [JSON/CSV/Report]\n- Include: [metrics, visualizations, etc.]\n\n## Success Criteria\n- No errors during processing\n- Output validates against schema\n- Performance: &lt; [X] seconds\n- TASK_COMPLETE added\n</code></pre>"},{"location":"examples/#cli-tool_1","title":"CLI Tool","text":"<pre><code># Task: Build [Tool Name] CLI\n\n## Commands\n- `tool command1` - [description]\n- `tool command2` - [description]\n\n## Options\n- `--option1` - [description]\n- `--option2` - [description]\n\n## Requirements\n- Argument parsing with argparse\n- Configuration file support\n- Colored output\n- Progress bars for long operations\n\n## Examples\n```bash\ntool process --input file.txt --output result.json\ntool analyze --verbose\n</code></pre>"},{"location":"examples/#completion","title":"Completion","text":"<ul> <li>All commands working</li> <li>Help text complete</li> <li>Error handling robust</li> <li>TASK_COMPLETE added ```</li> </ul>"},{"location":"examples/#learning-from-examples","title":"Learning from Examples","text":""},{"location":"examples/#study-the-patterns","title":"Study the Patterns","text":"<ol> <li>Prompt Structure: How successful prompts are organized</li> <li>Iteration Counts: Typical iterations for different task types</li> <li>Token Usage: Costs for various complexities</li> <li>Completion Time: Expected runtime for tasks</li> </ol>"},{"location":"examples/#experiment","title":"Experiment","text":"<ol> <li>Start with provided examples</li> <li>Modify them for your needs</li> <li>Compare different approaches</li> <li>Share successful patterns</li> </ol>"},{"location":"examples/#contributing-examples","title":"Contributing Examples","text":"<p>Have a great example? Share it:</p> <ol> <li>Create a new example file</li> <li>Document the use case</li> <li>Include expected results</li> <li>Submit a pull request</li> </ol>"},{"location":"examples/#troubleshooting-examples","title":"Troubleshooting Examples","text":""},{"location":"examples/#task-not-completing","title":"Task Not Completing","text":"<p>If examples run indefinitely: - Check completion criteria clarity - Verify agent can modify files - Review iteration logs - Adjust max iterations</p>"},{"location":"examples/#high-costs","title":"High Costs","text":"<p>If examples are expensive: - Use simpler prompts - Set token limits - Choose appropriate agents - Enable context management</p>"},{"location":"examples/#poor-results","title":"Poor Results","text":"<p>If output quality is low: - Provide more context - Include examples in prompt - Specify constraints clearly - Use more capable agents</p>"},{"location":"examples/#next-steps","title":"Next Steps","text":"<ul> <li>Try the Simple Task Example</li> <li>Explore Web API Example</li> <li>Build a CLI Tool</li> <li>Analyze Data</li> </ul> <p>\ud83d\udcda Continue to Simple Task Example \u2192</p>"},{"location":"examples/simple-task/","title":"Simple Task Example: Todo List CLI","text":"<p>This example demonstrates building a simple command-line todo list application using Ralph Orchestrator.</p>"},{"location":"examples/simple-task/#overview","title":"Overview","text":"<p>We'll create a Python CLI application that: - Manages todo items (add, list, complete, remove) - Persists data to JSON file - Includes colored output - Has comprehensive error handling</p>"},{"location":"examples/simple-task/#the-prompt","title":"The Prompt","text":"<p>Create a file <code>todo-prompt.md</code>:</p> <p><pre><code># Build Todo List CLI Application\n\n## Objective\nCreate a command-line todo list manager with file persistence.\n\n## Requirements\n\n### Core Features\n1. Add new todo items with descriptions\n2. List all todos with status\n3. Mark todos as complete\n4. Remove todos\n5. Clear all todos\n6. Save todos to JSON file\n\n### Technical Specifications\n- Language: Python 3.8+\n- File storage: todos.json\n- Use argparse for CLI\n- Add colored output (use colorama or ANSI codes)\n- Include proper error handling\n\n### Commands\n- `todo add &lt;description&gt;` - Add new todo\n- `todo list` - Show all todos\n- `todo done &lt;id&gt;` - Mark as complete\n- `todo remove &lt;id&gt;` - Delete todo\n- `todo clear` - Remove all todos\n\n### File Structure\n</code></pre> todo-app/ \u251c\u2500\u2500 todo.py          # Main CLI application \u251c\u2500\u2500 todos.json       # Data storage \u251c\u2500\u2500 test_todo.py     # Unit tests \u2514\u2500\u2500 README.md        # Documentation <pre><code>## Example Usage\n\n```bash\n$ python todo.py add \"Buy groceries\"\n\u2705 Added: Buy groceries (ID: 1)\n\n$ python todo.py add \"Write documentation\"\n\u2705 Added: Write documentation (ID: 2)\n\n$ python todo.py list\nTodo List:\n[ ] 1. Buy groceries\n[ ] 2. Write documentation\n\n$ python todo.py done 1\n\u2705 Completed: Buy groceries\n\n$ python todo.py list\nTodo List:\n[\u2713] 1. Buy groceries\n[ ] 2. Write documentation\n\n$ python todo.py remove 1\n\u2705 Removed: Buy groceries\n</code></pre></p>"},{"location":"examples/simple-task/#data-format","title":"Data Format","text":"<p>todos.json: <pre><code>{\n  \"todos\": [\n    {\n      \"id\": 1,\n      \"description\": \"Buy groceries\",\n      \"completed\": false,\n      \"created_at\": \"2024-01-10T10:00:00\",\n      \"completed_at\": null\n    }\n  ],\n  \"next_id\": 2\n}\n</code></pre></p>"},{"location":"examples/simple-task/#success-criteria","title":"Success Criteria","text":"<ul> <li> All commands working as specified</li> <li> Data persists between runs</li> <li> Colored output for better UX</li> <li> Error handling for edge cases</li> <li> Tests cover main functionality</li> <li> README with usage instructions</li> </ul> <p>When complete, add \"TASK_COMPLETE\" to this file. <pre><code>## Running the Example\n\n### Basic Execution\n\n```bash\npython ralph_orchestrator.py --prompt todo-prompt.md\n</code></pre></p>"},{"location":"examples/simple-task/#with-specific-settings","title":"With Specific Settings","text":"<pre><code># Budget-conscious approach\npython ralph_orchestrator.py \\\n  --agent q \\\n  --prompt todo-prompt.md \\\n  --max-cost 2.0 \\\n  --max-iterations 20\n\n# Quality-focused approach\npython ralph_orchestrator.py \\\n  --agent claude \\\n  --prompt todo-prompt.md \\\n  --max-cost 10.0 \\\n  --checkpoint-interval 3\n</code></pre>"},{"location":"examples/simple-task/#expected-results","title":"Expected Results","text":""},{"location":"examples/simple-task/#iterations","title":"Iterations","text":"<p>Typical completion: 5-15 iterations</p>"},{"location":"examples/simple-task/#cost-estimates","title":"Cost Estimates","text":"<ul> <li>Q Chat: $0.50 - $1.50</li> <li>Gemini: $0.75 - $2.00</li> <li>Claude: $2.00 - $5.00</li> </ul>"},{"location":"examples/simple-task/#files-created","title":"Files Created","text":"<p>After successful completion:</p> <pre><code>todo-app/\n\u251c\u2500\u2500 todo.py          # ~200 lines\n\u251c\u2500\u2500 todos.json       # Initial empty structure\n\u251c\u2500\u2500 test_todo.py     # ~100 lines\n\u2514\u2500\u2500 README.md        # ~50 lines\n</code></pre>"},{"location":"examples/simple-task/#sample-output","title":"Sample Output","text":"<p>Here's what the generated <code>todo.py</code> might look like:</p> <pre><code>#!/usr/bin/env python3\n\"\"\"\nTodo List CLI Application\nA simple command-line todo manager with JSON persistence.\n\"\"\"\n\nimport argparse\nimport json\nimport os\nfrom datetime import datetime\nfrom pathlib import Path\n\n# ANSI color codes\nGREEN = '\\033[92m'\nYELLOW = '\\033[93m'\nRED = '\\033[91m'\nRESET = '\\033[0m'\nBOLD = '\\033[1m'\n\nclass TodoManager:\n    def __init__(self, filename='todos.json'):\n        self.filename = filename\n        self.todos = self.load_todos()\n\n    def load_todos(self):\n        \"\"\"Load todos from JSON file.\"\"\"\n        if not os.path.exists(self.filename):\n            return {'todos': [], 'next_id': 1}\n\n        try:\n            with open(self.filename, 'r') as f:\n                return json.load(f)\n        except json.JSONDecodeError:\n            return {'todos': [], 'next_id': 1}\n\n    def save_todos(self):\n        \"\"\"Save todos to JSON file.\"\"\"\n        with open(self.filename, 'w') as f:\n            json.dump(self.todos, f, indent=2, default=str)\n\n    def add_todo(self, description):\n        \"\"\"Add a new todo item.\"\"\"\n        todo = {\n            'id': self.todos['next_id'],\n            'description': description,\n            'completed': False,\n            'created_at': datetime.now().isoformat(),\n            'completed_at': None\n        }\n\n        self.todos['todos'].append(todo)\n        self.todos['next_id'] += 1\n        self.save_todos()\n\n        print(f\"{GREEN}\u2705 Added: {description} (ID: {todo['id']}){RESET}\")\n        return todo['id']\n\n    def list_todos(self):\n        \"\"\"List all todos.\"\"\"\n        if not self.todos['todos']:\n            print(f\"{YELLOW}No todos found.{RESET}\")\n            return\n\n        print(f\"{BOLD}Todo List:{RESET}\")\n        for todo in self.todos['todos']:\n            status = f\"{GREEN}[\u2713]{RESET}\" if todo['completed'] else \"[ ]\"\n            print(f\"{status} {todo['id']}. {todo['description']}\")\n\n    def complete_todo(self, todo_id):\n        \"\"\"Mark a todo as complete.\"\"\"\n        for todo in self.todos['todos']:\n            if todo['id'] == todo_id:\n                todo['completed'] = True\n                todo['completed_at'] = datetime.now().isoformat()\n                self.save_todos()\n                print(f\"{GREEN}\u2705 Completed: {todo['description']}{RESET}\")\n                return True\n\n        print(f\"{RED}\u274c Todo with ID {todo_id} not found.{RESET}\")\n        return False\n\n    def remove_todo(self, todo_id):\n        \"\"\"Remove a todo.\"\"\"\n        for i, todo in enumerate(self.todos['todos']):\n            if todo['id'] == todo_id:\n                removed = self.todos['todos'].pop(i)\n                self.save_todos()\n                print(f\"{GREEN}\u2705 Removed: {removed['description']}{RESET}\")\n                return True\n\n        print(f\"{RED}\u274c Todo with ID {todo_id} not found.{RESET}\")\n        return False\n\n    def clear_todos(self):\n        \"\"\"Clear all todos.\"\"\"\n        count = len(self.todos['todos'])\n        self.todos = {'todos': [], 'next_id': 1}\n        self.save_todos()\n        print(f\"{GREEN}\u2705 Cleared {count} todos.{RESET}\")\n\ndef main():\n    parser = argparse.ArgumentParser(description='Todo List CLI')\n    subparsers = parser.add_subparsers(dest='command', help='Commands')\n\n    # Add command\n    add_parser = subparsers.add_parser('add', help='Add a new todo')\n    add_parser.add_argument('description', nargs='+', help='Todo description')\n\n    # List command\n    subparsers.add_parser('list', help='List all todos')\n\n    # Done command\n    done_parser = subparsers.add_parser('done', help='Mark todo as complete')\n    done_parser.add_argument('id', type=int, help='Todo ID')\n\n    # Remove command\n    remove_parser = subparsers.add_parser('remove', help='Remove a todo')\n    remove_parser.add_argument('id', type=int, help='Todo ID')\n\n    # Clear command\n    subparsers.add_parser('clear', help='Clear all todos')\n\n    args = parser.parse_args()\n\n    if not args.command:\n        parser.print_help()\n        return\n\n    manager = TodoManager()\n\n    if args.command == 'add':\n        description = ' '.join(args.description)\n        manager.add_todo(description)\n    elif args.command == 'list':\n        manager.list_todos()\n    elif args.command == 'done':\n        manager.complete_todo(args.id)\n    elif args.command == 'remove':\n        manager.remove_todo(args.id)\n    elif args.command == 'clear':\n        manager.clear_todos()\n\nif __name__ == '__main__':\n    main()\n</code></pre>"},{"location":"examples/simple-task/#variations","title":"Variations","text":""},{"location":"examples/simple-task/#1-enhanced-version","title":"1. Enhanced Version","text":"<p>Add these features to the prompt:</p> <pre><code>## Additional Features\n- Priority levels (high, medium, low)\n- Due dates with reminders\n- Categories/tags\n- Search functionality\n- Export to CSV/Markdown\n</code></pre>"},{"location":"examples/simple-task/#2-web-interface","title":"2. Web Interface","text":"<p>Transform to a web application:</p> <pre><code>## Web Version\nInstead of CLI, create a Flask web app with:\n- HTML interface\n- REST API endpoints\n- SQLite database\n- Basic authentication\n</code></pre>"},{"location":"examples/simple-task/#3-collaborative-version","title":"3. Collaborative Version","text":"<p>Add multi-user support:</p> <pre><code>## Multi-User Features\n- User accounts\n- Shared todo lists\n- Permissions (view/edit)\n- Activity logging\n</code></pre>"},{"location":"examples/simple-task/#troubleshooting","title":"Troubleshooting","text":""},{"location":"examples/simple-task/#issue-file-not-created","title":"Issue: File Not Created","text":"<p>Solution: Ensure the agent has write permissions:</p> <pre><code># Check permissions\nls -la\n\n# Run with explicit path\npython ralph_orchestrator.py --prompt ./todo-prompt.md\n</code></pre>"},{"location":"examples/simple-task/#issue-tests-failing","title":"Issue: Tests Failing","text":"<p>Solution: Specify test framework:</p> <pre><code>## Testing Requirements\nUse pytest for testing:\n- Install: pip install pytest\n- Run: pytest test_todo.py\n- Coverage: pytest --cov=todo\n</code></pre>"},{"location":"examples/simple-task/#issue-colors-not-working","title":"Issue: Colors Not Working","text":"<p>Solution: Add fallback for Windows:</p> <pre><code>## Color Output\n- Try colorama first (cross-platform)\n- Fall back to ANSI codes\n- Detect terminal support\n- Add --no-color option\n</code></pre>"},{"location":"examples/simple-task/#learning-points","title":"Learning Points","text":""},{"location":"examples/simple-task/#what-this-example-teaches","title":"What This Example Teaches","text":"<ol> <li>CLI Development: Using argparse effectively</li> <li>Data Persistence: JSON file handling</li> <li>Error Handling: Graceful failure modes</li> <li>User Experience: Colored output and clear feedback</li> <li>Testing: Writing unit tests for CLI apps</li> </ol>"},{"location":"examples/simple-task/#key-patterns","title":"Key Patterns","text":"<ul> <li>Command pattern for CLI actions</li> <li>Repository pattern for data storage</li> <li>Clear separation of concerns</li> <li>Comprehensive error messages</li> </ul>"},{"location":"examples/simple-task/#next-steps","title":"Next Steps","text":"<p>After completing this example:</p> <ol> <li>Extend Features: Add the variations mentioned above</li> <li>Improve Testing: Add integration tests</li> <li>Package It: Create setup.py for distribution</li> <li>Add CI/CD: GitHub Actions workflow</li> </ol>"},{"location":"examples/simple-task/#related-examples","title":"Related Examples","text":"<ul> <li>Web API Example - Build a REST API version</li> <li>CLI Tool Example - More advanced CLI patterns</li> <li>Data Analysis Example - Process todo statistics</li> </ul> <p>\ud83d\udcda Continue to Web API Example \u2192</p>"},{"location":"guide/agents/","title":"AI Agents Guide","text":"<p>Ralph Orchestrator supports multiple AI agents, each with unique capabilities and cost structures. This guide helps you choose and configure the right agent for your task.</p>"},{"location":"guide/agents/#supported-agents","title":"Supported Agents","text":""},{"location":"guide/agents/#claude-anthropic","title":"Claude (Anthropic)","text":"<p>Claude is Anthropic's advanced AI assistant, known for nuanced understanding and high-quality outputs.</p> <p>Strengths: - Excellent code generation and debugging - Strong reasoning and analysis - Comprehensive documentation writing - Ethical and safe responses - Large context window (200K tokens)</p> <p>Best For: - Complex software development - Technical documentation - Research and analysis - Creative writing - Problem-solving requiring deep reasoning</p> <p>Installation: <pre><code>npm install -g @anthropic-ai/claude-cli\n</code></pre></p> <p>Usage: <pre><code>python ralph_orchestrator.py --agent claude\n</code></pre></p> <p>Cost: - Input: $3.00 per million tokens - Output: $15.00 per million tokens</p>"},{"location":"guide/agents/#q-chat","title":"Q Chat","text":"<p>Q Chat is a cost-effective AI assistant suitable for many general tasks.</p> <p>Strengths: - Good general-purpose capabilities - Fast response times - Cost-effective for simple tasks - Reliable for straightforward operations</p> <p>Best For: - Simple coding tasks - Basic documentation - Data processing - Quick prototypes - Budget-conscious operations</p> <p>Installation: <pre><code>pip install q-cli\n</code></pre></p> <p>Usage: <pre><code>python ralph_orchestrator.py --agent q\n</code></pre></p> <p>Cost: - Input: $0.50 per million tokens (estimated) - Output: $1.50 per million tokens (estimated)</p>"},{"location":"guide/agents/#gemini-google","title":"Gemini (Google)","text":"<p>Google's Gemini offers strong capabilities with multimodal understanding.</p> <p>Strengths: - Excellent at data analysis - Strong mathematical capabilities - Good code understanding - Multimodal capabilities (Pro version) - Competitive pricing</p> <p>Best For: - Data science tasks - Mathematical computations - Code analysis - Research tasks - Multi-language support</p> <p>Installation: <pre><code>pip install google-generativeai\n</code></pre></p> <p>Usage: <pre><code>python ralph_orchestrator.py --agent gemini\n</code></pre></p> <p>Cost: - Input: $0.50 per million tokens - Output: $1.50 per million tokens</p>"},{"location":"guide/agents/#auto-detection","title":"Auto-Detection","text":"<p>Ralph Orchestrator can automatically detect and use available agents:</p> <pre><code>python ralph_orchestrator.py --agent auto\n</code></pre> <p>Detection Order: 1. Claude (if installed) 2. Q Chat (if installed) 3. Gemini (if installed)</p>"},{"location":"guide/agents/#agent-comparison","title":"Agent Comparison","text":"Feature Claude Q Chat Gemini Context Window 200K 100K 128K Code Quality Excellent Good Very Good Documentation Excellent Good Good Speed Moderate Fast Fast Cost High Low Low Reasoning Excellent Good Very Good Creativity Excellent Good Good Math/Data Very Good Good Excellent"},{"location":"guide/agents/#choosing-the-right-agent","title":"Choosing the Right Agent","text":""},{"location":"guide/agents/#decision-tree","title":"Decision Tree","text":"<pre><code>graph TD\n    A[Select Agent] --&gt; B{Task Type?}\n    B --&gt;|Complex Code| C[Claude]\n    B --&gt;|Simple Task| D{Budget?}\n    B --&gt;|Data Analysis| E[Gemini]\n    D --&gt;|Limited| F[Q Chat]\n    D --&gt;|Flexible| G[Claude/Gemini]\n    B --&gt;|Documentation| H{Quality Need?}\n    H --&gt;|High| I[Claude]\n    H --&gt;|Standard| J[Q Chat/Gemini]</code></pre>"},{"location":"guide/agents/#task-agent-mapping","title":"Task-Agent Mapping","text":"Task Type Recommended Agent Alternative Web API Development Claude Gemini CLI Tool Creation Claude Q Chat Data Processing Gemini Claude Documentation Claude Gemini Testing Claude Q Chat Refactoring Claude Gemini Simple Scripts Q Chat Gemini Research Claude Gemini Prototyping Q Chat Gemini Production Code Claude -"},{"location":"guide/agents/#agent-configuration","title":"Agent Configuration","text":""},{"location":"guide/agents/#claude-configuration","title":"Claude Configuration","text":"<pre><code># Standard Claude usage\npython ralph_orchestrator.py --agent claude\n\n# With specific model\npython ralph_orchestrator.py \\\n  --agent claude \\\n  --agent-args \"--model claude-3-sonnet-20240229\"\n\n# With custom parameters\npython ralph_orchestrator.py \\\n  --agent claude \\\n  --agent-args \"--temperature 0.7 --max-tokens 4096\"\n</code></pre>"},{"location":"guide/agents/#q-chat-configuration","title":"Q Chat Configuration","text":"<pre><code># Standard Q usage\npython ralph_orchestrator.py --agent q\n\n# With custom parameters\npython ralph_orchestrator.py \\\n  --agent q \\\n  --agent-args \"--context-length 50000\"\n</code></pre>"},{"location":"guide/agents/#gemini-configuration","title":"Gemini Configuration","text":"<pre><code># Standard Gemini usage\npython ralph_orchestrator.py --agent gemini\n\n# With specific model\npython ralph_orchestrator.py \\\n  --agent gemini \\\n  --agent-args \"--model gemini-pro\"\n</code></pre>"},{"location":"guide/agents/#agent-specific-features","title":"Agent-Specific Features","text":""},{"location":"guide/agents/#claude-features","title":"Claude Features","text":"<ul> <li>Constitutional AI: Built-in safety and ethics</li> <li>Code Understanding: Deep comprehension of complex codebases</li> <li>Long Context: Handles up to 200K tokens</li> <li>Nuanced Responses: Understands subtle requirements</li> </ul> <pre><code># Leverage Claude's long context\npython ralph_orchestrator.py \\\n  --agent claude \\\n  --context-window 200000 \\\n  --context-threshold 0.9\n</code></pre>"},{"location":"guide/agents/#q-chat-features","title":"Q Chat Features","text":"<ul> <li>Speed: Fast response times</li> <li>Efficiency: Lower resource usage</li> <li>Simplicity: Straightforward for basic tasks</li> </ul> <pre><code># Quick iterations with Q\npython ralph_orchestrator.py \\\n  --agent q \\\n  --max-iterations 100 \\\n  --retry-delay 1\n</code></pre>"},{"location":"guide/agents/#gemini-features","title":"Gemini Features","text":"<ul> <li>Data Excellence: Superior at data tasks</li> <li>Mathematical Prowess: Strong calculation abilities</li> <li>Multi-language: Good support for various programming languages</li> </ul> <pre><code># Data processing with Gemini\npython ralph_orchestrator.py \\\n  --agent gemini \\\n  --prompt data_analysis.md\n</code></pre>"},{"location":"guide/agents/#multi-agent-strategies","title":"Multi-Agent Strategies","text":""},{"location":"guide/agents/#sequential-processing","title":"Sequential Processing","text":"<p>Process with different agents for different phases:</p> <pre><code># Phase 1: Research with Claude\npython ralph_orchestrator.py --agent claude --prompt research.md\n\n# Phase 2: Implementation with Q\npython ralph_orchestrator.py --agent q --prompt implement.md\n\n# Phase 3: Documentation with Claude\npython ralph_orchestrator.py --agent claude --prompt document.md\n</code></pre>"},{"location":"guide/agents/#cost-optimization","title":"Cost Optimization","text":"<p>Start with cheaper agents, escalate if needed:</p> <pre><code># Try Q first\npython ralph_orchestrator.py --agent q --max-cost 2.0\n\n# If unsuccessful, try Claude\npython ralph_orchestrator.py --agent claude --max-cost 20.0\n</code></pre>"},{"location":"guide/agents/#agent-performance-tuning","title":"Agent Performance Tuning","text":""},{"location":"guide/agents/#claude-optimization","title":"Claude Optimization","text":"<pre><code># Optimized for quality\npython ralph_orchestrator.py \\\n  --agent claude \\\n  --max-iterations 50 \\\n  --checkpoint-interval 5 \\\n  --context-window 200000\n\n# Optimized for speed\npython ralph_orchestrator.py \\\n  --agent claude \\\n  --max-iterations 20 \\\n  --retry-delay 1\n</code></pre>"},{"location":"guide/agents/#q-chat-optimization","title":"Q Chat Optimization","text":"<pre><code># Maximum efficiency\npython ralph_orchestrator.py \\\n  --agent q \\\n  --max-iterations 200 \\\n  --checkpoint-interval 20 \\\n  --metrics-interval 50\n</code></pre>"},{"location":"guide/agents/#gemini-optimization","title":"Gemini Optimization","text":"<pre><code># Data-heavy tasks\npython ralph_orchestrator.py \\\n  --agent gemini \\\n  --context-window 128000 \\\n  --max-tokens 500000\n</code></pre>"},{"location":"guide/agents/#troubleshooting-agents","title":"Troubleshooting Agents","text":""},{"location":"guide/agents/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Agent Not Found <pre><code># Check installation\nwhich claude  # or q, gemini\n\n# Use auto-detection\npython ralph_orchestrator.py --agent auto --dry-run\n</code></pre></p> </li> <li> <p>Rate Limiting <pre><code># Increase retry delay\npython ralph_orchestrator.py --retry-delay 10\n</code></pre></p> </li> <li> <p>Context Overflow <pre><code># Adjust context settings\npython ralph_orchestrator.py \\\n  --context-window 100000 \\\n  --context-threshold 0.7\n</code></pre></p> </li> <li> <p>Poor Output Quality <pre><code># Switch to higher-quality agent\npython ralph_orchestrator.py --agent claude\n</code></pre></p> </li> </ol>"},{"location":"guide/agents/#agent-diagnostics","title":"Agent Diagnostics","text":"<pre><code># Test agent availability\npython ralph_orchestrator.py --agent auto --dry-run --verbose\n\n# Check agent performance\npython ralph_orchestrator.py \\\n  --agent claude \\\n  --max-iterations 1 \\\n  --verbose \\\n  --metrics-interval 1\n</code></pre>"},{"location":"guide/agents/#cost-management-by-agent","title":"Cost Management by Agent","text":""},{"location":"guide/agents/#budget-allocation","title":"Budget Allocation","text":"<pre><code># Low budget: Use Q\npython ralph_orchestrator.py --agent q --max-cost 5.0\n\n# Medium budget: Use Gemini\npython ralph_orchestrator.py --agent gemini --max-cost 25.0\n\n# High budget: Use Claude\npython ralph_orchestrator.py --agent claude --max-cost 100.0\n</code></pre>"},{"location":"guide/agents/#cost-tracking","title":"Cost Tracking","text":"<p>Monitor costs per agent:</p> <pre><code># Enable detailed metrics\npython ralph_orchestrator.py \\\n  --agent claude \\\n  --metrics-interval 1 \\\n  --verbose\n</code></pre>"},{"location":"guide/agents/#best-practices","title":"Best Practices","text":""},{"location":"guide/agents/#1-match-agent-to-task","title":"1. Match Agent to Task","text":"<ul> <li>Complex logic: Use Claude</li> <li>Simple tasks: Use Q Chat</li> <li>Data work: Use Gemini</li> </ul>"},{"location":"guide/agents/#2-start-small","title":"2. Start Small","text":"<p>Test with few iterations first:</p> <pre><code>python ralph_orchestrator.py --agent auto --max-iterations 5\n</code></pre>"},{"location":"guide/agents/#3-monitor-performance","title":"3. Monitor Performance","text":"<p>Track metrics for optimization:</p> <pre><code>python ralph_orchestrator.py --metrics-interval 5 --verbose\n</code></pre>"},{"location":"guide/agents/#4-use-auto-detection","title":"4. Use Auto-Detection","text":"<p>Let the system choose when unsure:</p> <pre><code>python ralph_orchestrator.py --agent auto\n</code></pre>"},{"location":"guide/agents/#5-consider-costs","title":"5. Consider Costs","text":"<p>Balance quality with budget:</p> <ul> <li>Development: Use Q Chat</li> <li>Testing: Use Gemini</li> <li>Production: Use Claude</li> </ul>"},{"location":"guide/agents/#next-steps","title":"Next Steps","text":"<ul> <li>Master Prompt Engineering for better results</li> <li>Learn about Cost Management</li> <li>Understand Checkpointing strategies</li> <li>Explore Configuration options</li> </ul>"},{"location":"guide/checkpointing/","title":"Checkpointing and Recovery Guide","text":"<p>Ralph Orchestrator provides robust checkpointing mechanisms to ensure work is never lost and tasks can be resumed after interruptions.</p>"},{"location":"guide/checkpointing/#overview","title":"Overview","text":"<p>Checkpointing saves the state of your orchestration at regular intervals, enabling: - Recovery from crashes or interruptions - Progress tracking across iterations - State inspection for debugging - Audit trails for compliance</p>"},{"location":"guide/checkpointing/#checkpoint-types","title":"Checkpoint Types","text":""},{"location":"guide/checkpointing/#1-git-checkpoints","title":"1. Git Checkpoints","text":"<p>Automatic git commits at specified intervals:</p> <pre><code># Enable git checkpointing (default)\npython ralph_orchestrator.py --checkpoint-interval 5\n\n# Disable git checkpointing\npython ralph_orchestrator.py --no-git\n</code></pre> <p>What's saved: - Current prompt file state - Any files created/modified by the agent - Timestamp and iteration number</p>"},{"location":"guide/checkpointing/#2-prompt-archives","title":"2. Prompt Archives","text":"<p>Historical versions of the prompt file:</p> <pre><code># Enable prompt archiving (default)\npython ralph_orchestrator.py\n\n# Disable prompt archiving\npython ralph_orchestrator.py --no-archive\n</code></pre> <p>Location: <code>.agent/prompts/prompt_YYYYMMDD_HHMMSS.md</code></p>"},{"location":"guide/checkpointing/#3-state-snapshots","title":"3. State Snapshots","text":"<p>JSON files containing orchestrator state:</p> <pre><code>{\n  \"iteration\": 15,\n  \"agent\": \"claude\",\n  \"start_time\": \"2024-01-10T10:00:00\",\n  \"tokens_used\": 50000,\n  \"cost_incurred\": 2.50,\n  \"status\": \"running\"\n}\n</code></pre> <p>Location: <code>.agent/metrics/state_*.json</code></p>"},{"location":"guide/checkpointing/#configuration","title":"Configuration","text":""},{"location":"guide/checkpointing/#checkpoint-interval","title":"Checkpoint Interval","text":"<p>Control how often checkpoints occur:</p> <pre><code># Checkpoint every iteration (maximum safety)\npython ralph_orchestrator.py --checkpoint-interval 1\n\n# Checkpoint every 10 iterations (balanced)\npython ralph_orchestrator.py --checkpoint-interval 10\n\n# Checkpoint every 50 iterations (minimal overhead)\npython ralph_orchestrator.py --checkpoint-interval 50\n</code></pre>"},{"location":"guide/checkpointing/#checkpoint-strategies","title":"Checkpoint Strategies","text":""},{"location":"guide/checkpointing/#aggressive-checkpointing","title":"Aggressive Checkpointing","text":"<p>For critical or experimental tasks:</p> <pre><code>python ralph_orchestrator.py \\\n  --checkpoint-interval 1 \\\n  --metrics-interval 1 \\\n  --verbose\n</code></pre>"},{"location":"guide/checkpointing/#balanced-checkpointing","title":"Balanced Checkpointing","text":"<p>For standard production tasks:</p> <pre><code>python ralph_orchestrator.py \\\n  --checkpoint-interval 5 \\\n  --metrics-interval 10\n</code></pre>"},{"location":"guide/checkpointing/#minimal-checkpointing","title":"Minimal Checkpointing","text":"<p>For simple, fast tasks:</p> <pre><code>python ralph_orchestrator.py \\\n  --checkpoint-interval 20 \\\n  --no-archive\n</code></pre>"},{"location":"guide/checkpointing/#recovery-procedures","title":"Recovery Procedures","text":""},{"location":"guide/checkpointing/#automatic-recovery","title":"Automatic Recovery","text":"<p>Ralph Orchestrator automatically recovers from the last checkpoint:</p> <ol> <li>Detect interruption</li> <li>Load last checkpoint</li> <li>Resume from last known state</li> <li>Continue iteration</li> </ol>"},{"location":"guide/checkpointing/#manual-recovery","title":"Manual Recovery","text":""},{"location":"guide/checkpointing/#from-git-checkpoint","title":"From Git Checkpoint","text":"<pre><code># View checkpoint history\ngit log --oneline | grep \"Ralph checkpoint\"\n\n# Restore specific checkpoint\ngit checkout &lt;commit-hash&gt;\n\n# Resume orchestration\npython ralph_orchestrator.py --prompt PROMPT.md\n</code></pre>"},{"location":"guide/checkpointing/#from-prompt-archive","title":"From Prompt Archive","text":"<pre><code># List archived prompts\nls -la .agent/prompts/\n\n# Restore archived prompt\ncp .agent/prompts/prompt_20240110_100000.md PROMPT.md\n\n# Resume orchestration\npython ralph_orchestrator.py\n</code></pre>"},{"location":"guide/checkpointing/#from-state-snapshot","title":"From State Snapshot","text":"<pre><code># Load state programmatically\nimport json\n\nwith open('.agent/metrics/state_20240110_100000.json') as f:\n    state = json.load(f)\n\nprint(f\"Last iteration: {state['iteration']}\")\nprint(f\"Tokens used: {state['tokens_used']}\")\nprint(f\"Cost incurred: ${state['cost_incurred']}\")\n</code></pre>"},{"location":"guide/checkpointing/#checkpoint-storage","title":"Checkpoint Storage","text":""},{"location":"guide/checkpointing/#directory-structure","title":"Directory Structure","text":"<pre><code>.agent/\n\u251c\u2500\u2500 checkpoints/       # Git checkpoint metadata\n\u251c\u2500\u2500 prompts/          # Archived prompt files\n\u2502   \u251c\u2500\u2500 prompt_20240110_100000.md\n\u2502   \u251c\u2500\u2500 prompt_20240110_101500.md\n\u2502   \u2514\u2500\u2500 prompt_20240110_103000.md\n\u251c\u2500\u2500 metrics/          # State and metrics\n\u2502   \u251c\u2500\u2500 state_20240110_100000.json\n\u2502   \u251c\u2500\u2500 state_20240110_101500.json\n\u2502   \u2514\u2500\u2500 metrics_20240110_103000.json\n\u2514\u2500\u2500 logs/            # Execution logs\n</code></pre>"},{"location":"guide/checkpointing/#storage-management","title":"Storage Management","text":""},{"location":"guide/checkpointing/#clean-old-checkpoints","title":"Clean Old Checkpoints","text":"<pre><code># Remove checkpoints older than 7 days\nfind .agent/prompts -mtime +7 -delete\nfind .agent/metrics -name \"*.json\" -mtime +7 -delete\n\n# Keep only last 100 checkpoints\nls -t .agent/prompts/*.md | tail -n +101 | xargs rm -f\n</code></pre>"},{"location":"guide/checkpointing/#backup-checkpoints","title":"Backup Checkpoints","text":"<pre><code># Create backup archive\ntar -czf ralph_checkpoints_$(date +%Y%m%d).tar.gz .agent/\n\n# Backup to remote\nrsync -av .agent/ user@backup-server:/backups/ralph/\n</code></pre>"},{"location":"guide/checkpointing/#advanced-checkpointing","title":"Advanced Checkpointing","text":""},{"location":"guide/checkpointing/#custom-checkpoint-triggers","title":"Custom Checkpoint Triggers","text":"<p>Beyond interval-based checkpointing, you can trigger checkpoints in your prompt:</p> <pre><code>## Progress\n- Step 1 complete [CHECKPOINT]\n- Step 2 complete [CHECKPOINT]\n- Step 3 complete [CHECKPOINT]\n</code></pre>"},{"location":"guide/checkpointing/#checkpoint-hooks","title":"Checkpoint Hooks","text":"<p>Use git hooks for custom checkpoint processing:</p> <pre><code># .git/hooks/post-commit\n#!/bin/bash\nif [[ $1 == *\"Ralph checkpoint\"* ]]; then\n    # Custom backup or notification\n    cp PROMPT.md /backup/location/\n    echo \"Checkpoint created\" | mail -s \"Ralph Progress\" admin@example.com\nfi\n</code></pre>"},{"location":"guide/checkpointing/#distributed-checkpointing","title":"Distributed Checkpointing","text":"<p>For team environments:</p> <pre><code># Push checkpoints to shared repository\npython ralph_orchestrator.py --checkpoint-interval 5\n\n# In another terminal/machine\ngit pull  # Get latest checkpoints\n\n# Or use automated sync\nwatch -n 60 'git pull'\n</code></pre>"},{"location":"guide/checkpointing/#best-practices","title":"Best Practices","text":""},{"location":"guide/checkpointing/#1-choose-appropriate-intervals","title":"1. Choose Appropriate Intervals","text":"Task Type Recommended Interval Rationale Experimental 1-2 Maximum recovery points Development 5-10 Balance safety/performance Production 10-20 Minimize overhead Simple 20-50 Low risk tasks"},{"location":"guide/checkpointing/#2-monitor-checkpoint-size","title":"2. Monitor Checkpoint Size","text":"<pre><code># Check checkpoint storage usage\ndu -sh .agent/\n\n# Monitor growth\nwatch -n 60 'du -sh .agent/*'\n</code></pre>"},{"location":"guide/checkpointing/#3-test-recovery","title":"3. Test Recovery","text":"<p>Regularly test recovery procedures:</p> <pre><code># Simulate interruption\npython ralph_orchestrator.py &amp;\nPID=$!\nsleep 30\nkill $PID\n\n# Verify recovery\npython ralph_orchestrator.py  # Should resume\n</code></pre>"},{"location":"guide/checkpointing/#4-clean-up-regularly","title":"4. Clean Up Regularly","text":"<p>Implement checkpoint rotation:</p> <pre><code># Keep last 50 checkpoints\n#!/bin/bash\nMAX_CHECKPOINTS=50\nCOUNT=$(ls .agent/prompts/*.md 2&gt;/dev/null | wc -l)\nif [ $COUNT -gt $MAX_CHECKPOINTS ]; then\n    ls -t .agent/prompts/*.md | tail -n +$(($MAX_CHECKPOINTS+1)) | xargs rm\nfi\n</code></pre>"},{"location":"guide/checkpointing/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guide/checkpointing/#common-issues","title":"Common Issues","text":""},{"location":"guide/checkpointing/#1-git-checkpointing-fails","title":"1. Git Checkpointing Fails","text":"<p>Error: \"Not a git repository\"</p> <p>Solution: <pre><code># Initialize git repository\ngit init\ngit add .\ngit commit -m \"Initial commit\"\n\n# Or disable git checkpointing\npython ralph_orchestrator.py --no-git\n</code></pre></p>"},{"location":"guide/checkpointing/#2-checkpoint-storage-full","title":"2. Checkpoint Storage Full","text":"<p>Error: \"No space left on device\"</p> <p>Solution: <pre><code># Clean old checkpoints\nfind .agent -type f -mtime +30 -delete\n\n# Move to larger storage\nmv .agent /larger/disk/\nln -s /larger/disk/.agent .agent\n</code></pre></p>"},{"location":"guide/checkpointing/#3-corrupted-checkpoint","title":"3. Corrupted Checkpoint","text":"<p>Error: \"Invalid checkpoint data\"</p> <p>Solution: <pre><code># Use previous checkpoint\nls -la .agent/prompts/  # Find earlier version\ncp .agent/prompts/prompt_EARLIER.md PROMPT.md\n</code></pre></p>"},{"location":"guide/checkpointing/#recovery-validation","title":"Recovery Validation","text":"<p>Verify checkpoint integrity:</p> <pre><code>#!/usr/bin/env python3\nimport json\nimport os\nfrom pathlib import Path\n\ndef validate_checkpoints():\n    checkpoint_dir = Path('.agent/metrics')\n    for state_file in checkpoint_dir.glob('state_*.json'):\n        try:\n            with open(state_file) as f:\n                data = json.load(f)\n                assert 'iteration' in data\n                assert 'agent' in data\n                print(f\"\u2713 {state_file.name}\")\n        except Exception as e:\n            print(f\"\u2717 {state_file.name}: {e}\")\n\nvalidate_checkpoints()\n</code></pre>"},{"location":"guide/checkpointing/#performance-impact","title":"Performance Impact","text":""},{"location":"guide/checkpointing/#checkpoint-overhead","title":"Checkpoint Overhead","text":"Interval Overhead Use Case 1 High (5-10%) Critical tasks 5 Moderate (2-5%) Standard tasks 10 Low (1-2%) Long tasks 20+ Minimal (&lt;1%) Simple tasks"},{"location":"guide/checkpointing/#optimization-tips","title":"Optimization Tips","text":"<ol> <li>Use SSDs for checkpoint storage</li> <li>Disable unnecessary features (e.g., <code>--no-archive</code> if not needed)</li> <li>Adjust intervals based on task criticality</li> <li>Clean up regularly to maintain performance</li> </ol>"},{"location":"guide/checkpointing/#integration","title":"Integration","text":""},{"location":"guide/checkpointing/#cicd-integration","title":"CI/CD Integration","text":"<pre><code># .github/workflows/ralph.yml\nname: Ralph Orchestration\non:\n  push:\n    branches: [main]\n\njobs:\n  orchestrate:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Run Ralph\n        run: |\n          python ralph_orchestrator.py \\\n            --checkpoint-interval 10 \\\n            --max-iterations 100\n\n      - name: Save Checkpoints\n        uses: actions/upload-artifact@v2\n        with:\n          name: ralph-checkpoints\n          path: .agent/\n</code></pre>"},{"location":"guide/checkpointing/#monitoring-integration","title":"Monitoring Integration","text":"<pre><code># Send checkpoint events to monitoring\n#!/bin/bash\nCHECKPOINT_COUNT=$(ls .agent/prompts/*.md 2&gt;/dev/null | wc -l)\ncurl -X POST https://metrics.example.com/api/v1/metrics \\\n  -d \"ralph.checkpoints.count=$CHECKPOINT_COUNT\"\n</code></pre>"},{"location":"guide/checkpointing/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Cost Management to optimize checkpoint costs</li> <li>Explore Configuration for checkpoint options</li> <li>Review Troubleshooting for recovery issues</li> <li>See Examples for checkpoint patterns</li> </ul>"},{"location":"guide/configuration/","title":"Configuration Guide","text":"<p>Ralph Orchestrator provides extensive configuration options to control execution, manage costs, and ensure safe operation. This guide covers all configuration parameters and best practices.</p>"},{"location":"guide/configuration/#configuration-methods","title":"Configuration Methods","text":""},{"location":"guide/configuration/#1-command-line-arguments","title":"1. Command Line Arguments","text":"<p>The primary way to configure Ralph Orchestrator is through command-line arguments:</p> <pre><code>python ralph_orchestrator.py --agent claude --max-iterations 50 --max-cost 25.0\n</code></pre>"},{"location":"guide/configuration/#2-environment-variables","title":"2. Environment Variables","text":"<p>Some settings can be configured via environment variables:</p> <pre><code>export RALPH_AGENT=claude\nexport RALPH_MAX_COST=25.0\npython ralph_orchestrator.py\n</code></pre>"},{"location":"guide/configuration/#3-configuration-file-future","title":"3. Configuration File (Future)","text":"<p>Configuration file support is planned for future releases.</p>"},{"location":"guide/configuration/#core-configuration-options","title":"Core Configuration Options","text":""},{"location":"guide/configuration/#agent-selection","title":"Agent Selection","text":"Parameter Default Description <code>--agent</code> <code>auto</code> AI agent to use: <code>claude</code>, <code>q</code>, <code>gemini</code>, or <code>auto</code> <code>--agent-args</code> None Additional arguments to pass to the agent <p>Example: <pre><code># Use Claude specifically\npython ralph_orchestrator.py --agent claude\n\n# Auto-detect available agent\npython ralph_orchestrator.py --agent auto\n\n# Pass additional arguments to agent\npython ralph_orchestrator.py --agent claude --agent-args \"--model claude-3-sonnet\"\n</code></pre></p>"},{"location":"guide/configuration/#prompt-configuration","title":"Prompt Configuration","text":"Parameter Default Description <code>--prompt</code> <code>PROMPT.md</code> Path to the prompt file <code>--max-prompt-size</code> 10MB Maximum allowed prompt file size <p>Example: <pre><code># Use custom prompt file\npython ralph_orchestrator.py --prompt tasks/my-task.md\n\n# Set maximum prompt size (in bytes)\npython ralph_orchestrator.py --max-prompt-size 5242880  # 5MB\n</code></pre></p>"},{"location":"guide/configuration/#execution-limits","title":"Execution Limits","text":""},{"location":"guide/configuration/#iteration-and-runtime","title":"Iteration and Runtime","text":"Parameter Default Description <code>--max-iterations</code> 100 Maximum number of iterations <code>--max-runtime</code> 14400 Maximum runtime in seconds (4 hours) <p>Example: <pre><code># Quick task with few iterations\npython ralph_orchestrator.py --max-iterations 10 --max-runtime 600\n\n# Long-running task\npython ralph_orchestrator.py --max-iterations 500 --max-runtime 86400  # 24 hours\n</code></pre></p>"},{"location":"guide/configuration/#token-and-cost-management","title":"Token and Cost Management","text":"Parameter Default Description <code>--max-tokens</code> 1,000,000 Maximum total tokens to use <code>--max-cost</code> 50.0 Maximum cost in USD <code>--context-window</code> 200,000 Context window size in tokens <code>--context-threshold</code> 0.8 Trigger summarization at this % of context <p>Example: <pre><code># Budget-conscious configuration\npython ralph_orchestrator.py \\\n  --max-tokens 100000 \\\n  --max-cost 5.0 \\\n  --context-window 100000\n\n# High-capacity configuration\npython ralph_orchestrator.py \\\n  --max-tokens 5000000 \\\n  --max-cost 200.0 \\\n  --context-window 500000\n</code></pre></p>"},{"location":"guide/configuration/#checkpointing-and-recovery","title":"Checkpointing and Recovery","text":"Parameter Default Description <code>--checkpoint-interval</code> 5 Iterations between checkpoints <code>--no-git</code> False Disable git checkpointing <code>--no-archive</code> False Disable prompt archiving <p>Example: <pre><code># Frequent checkpoints for critical tasks\npython ralph_orchestrator.py --checkpoint-interval 1\n\n# Disable git operations (for non-git directories)\npython ralph_orchestrator.py --no-git\n\n# Minimal persistence\npython ralph_orchestrator.py --no-git --no-archive\n</code></pre></p>"},{"location":"guide/configuration/#monitoring-and-debugging","title":"Monitoring and Debugging","text":"Parameter Default Description <code>--metrics-interval</code> 10 Iterations between metrics logs <code>--no-metrics</code> False Disable metrics collection <code>--verbose</code> False Enable verbose logging <code>--dry-run</code> False Test configuration without execution <p>Example: <pre><code># Verbose monitoring\npython ralph_orchestrator.py --verbose --metrics-interval 1\n\n# Test configuration\npython ralph_orchestrator.py --dry-run --verbose\n\n# Minimal logging\npython ralph_orchestrator.py --no-metrics\n</code></pre></p>"},{"location":"guide/configuration/#security-options","title":"Security Options","text":"Parameter Default Description <code>--allow-unsafe-paths</code> False Allow potentially unsafe file paths <p>Example: <pre><code># Standard security (recommended)\npython ralph_orchestrator.py\n\n# Allow unsafe paths (use with caution)\npython ralph_orchestrator.py --allow-unsafe-paths\n</code></pre></p>"},{"location":"guide/configuration/#retry-and-recovery","title":"Retry and Recovery","text":"Parameter Default Description <code>--retry-delay</code> 2 Delay between retries in seconds <p>Example: <pre><code># Slower retry for rate-limited APIs\npython ralph_orchestrator.py --retry-delay 10\n\n# Fast retry for local agents\npython ralph_orchestrator.py --retry-delay 1\n</code></pre></p>"},{"location":"guide/configuration/#configuration-profiles","title":"Configuration Profiles","text":""},{"location":"guide/configuration/#development-profile","title":"Development Profile","text":"<p>For local development and testing:</p> <pre><code>python ralph_orchestrator.py \\\n  --agent q \\\n  --max-iterations 10 \\\n  --max-cost 1.0 \\\n  --verbose \\\n  --checkpoint-interval 1 \\\n  --metrics-interval 1\n</code></pre>"},{"location":"guide/configuration/#production-profile","title":"Production Profile","text":"<p>For production workloads:</p> <pre><code>python ralph_orchestrator.py \\\n  --agent claude \\\n  --max-iterations 100 \\\n  --max-runtime 14400 \\\n  --max-tokens 1000000 \\\n  --max-cost 50.0 \\\n  --checkpoint-interval 5 \\\n  --metrics-interval 10\n</code></pre>"},{"location":"guide/configuration/#budget-profile","title":"Budget Profile","text":"<p>For cost-sensitive operations:</p> <pre><code>python ralph_orchestrator.py \\\n  --agent q \\\n  --max-tokens 50000 \\\n  --max-cost 2.0 \\\n  --context-window 50000 \\\n  --context-threshold 0.7\n</code></pre>"},{"location":"guide/configuration/#high-performance-profile","title":"High-Performance Profile","text":"<p>For complex, resource-intensive tasks:</p> <pre><code>python ralph_orchestrator.py \\\n  --agent claude \\\n  --max-iterations 500 \\\n  --max-runtime 86400 \\\n  --max-tokens 5000000 \\\n  --max-cost 500.0 \\\n  --context-window 500000 \\\n  --checkpoint-interval 10\n</code></pre>"},{"location":"guide/configuration/#configuration-best-practices","title":"Configuration Best Practices","text":""},{"location":"guide/configuration/#1-start-conservative","title":"1. Start Conservative","text":"<p>Begin with lower limits and increase as needed:</p> <pre><code># Start small\npython ralph_orchestrator.py --max-iterations 5 --max-cost 1.0\n\n# Increase if needed\npython ralph_orchestrator.py --max-iterations 50 --max-cost 10.0\n</code></pre>"},{"location":"guide/configuration/#2-use-dry-run","title":"2. Use Dry Run","text":"<p>Always test configuration before production:</p> <pre><code>python ralph_orchestrator.py --dry-run --verbose\n</code></pre>"},{"location":"guide/configuration/#3-monitor-metrics","title":"3. Monitor Metrics","text":"<p>Enable metrics for production workloads:</p> <pre><code>python ralph_orchestrator.py --metrics-interval 5 --verbose\n</code></pre>"},{"location":"guide/configuration/#4-set-appropriate-limits","title":"4. Set Appropriate Limits","text":"<p>Choose limits based on task complexity:</p> <ul> <li>Simple tasks: 10-20 iterations, $1-5 cost</li> <li>Medium tasks: 50-100 iterations, $10-25 cost</li> <li>Complex tasks: 100-500 iterations, $50-200 cost</li> </ul>"},{"location":"guide/configuration/#5-checkpoint-frequently","title":"5. Checkpoint Frequently","text":"<p>For long-running tasks, checkpoint often:</p> <pre><code>python ralph_orchestrator.py --checkpoint-interval 3\n</code></pre>"},{"location":"guide/configuration/#environment-specific-configuration","title":"Environment-Specific Configuration","text":""},{"location":"guide/configuration/#cicd-pipelines","title":"CI/CD Pipelines","text":"<pre><code>python ralph_orchestrator.py \\\n  --agent auto \\\n  --max-iterations 50 \\\n  --max-runtime 3600 \\\n  --no-git \\\n  --metrics-interval 10\n</code></pre>"},{"location":"guide/configuration/#docker-containers","title":"Docker Containers","text":"<pre><code>ENV RALPH_AGENT=claude\nENV RALPH_MAX_COST=25.0\nCMD [\"python\", \"ralph_orchestrator.py\", \"--no-git\", \"--max-runtime\", \"7200\"]\n</code></pre>"},{"location":"guide/configuration/#kubernetes","title":"Kubernetes","text":"<pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: ralph-config\ndata:\n  RALPH_AGENT: \"claude\"\n  RALPH_MAX_COST: \"50.0\"\n  RALPH_MAX_ITERATIONS: \"100\"\n</code></pre>"},{"location":"guide/configuration/#troubleshooting-configuration","title":"Troubleshooting Configuration","text":""},{"location":"guide/configuration/#common-issues","title":"Common Issues","text":"<ol> <li>Agent not found</li> <li> <p>Solution: Check agent installation with <code>--agent auto</code></p> </li> <li> <p>Exceeding cost limits</p> </li> <li> <p>Solution: Increase <code>--max-cost</code> or use cheaper agent</p> </li> <li> <p>Context overflow</p> </li> <li> <p>Solution: Decrease <code>--context-threshold</code> or increase <code>--context-window</code></p> </li> <li> <p>Slow performance</p> </li> <li>Solution: Increase <code>--checkpoint-interval</code> and <code>--metrics-interval</code></li> </ol>"},{"location":"guide/configuration/#debug-commands","title":"Debug Commands","text":"<pre><code># Check configuration\npython ralph_orchestrator.py --dry-run --verbose\n\n# List available agents\npython ralph_orchestrator.py --agent auto --dry-run\n\n# Test with minimal configuration\npython ralph_orchestrator.py --max-iterations 1 --verbose\n</code></pre>"},{"location":"guide/configuration/#configuration-reference","title":"Configuration Reference","text":"<p>For a complete list of all configuration options, run:</p> <pre><code>python ralph_orchestrator.py --help\n</code></pre>"},{"location":"guide/configuration/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about AI Agents and their capabilities</li> <li>Understand Prompt Engineering for better results</li> <li>Explore Cost Management strategies</li> <li>Set up Checkpointing for recovery</li> </ul>"},{"location":"guide/cost-management/","title":"Cost Management Guide","text":"<p>Effective cost management is crucial when running AI orchestration at scale. This guide helps you optimize spending while maintaining task quality.</p>"},{"location":"guide/cost-management/#understanding-costs","title":"Understanding Costs","text":""},{"location":"guide/cost-management/#token-pricing","title":"Token Pricing","text":"<p>Current pricing per million tokens:</p> Agent Input Cost Output Cost Avg Cost/Task Claude $3.00 $15.00 $5-50 Q Chat $0.50 $1.50 $1-10 Gemini $0.50 $1.50 $1-10"},{"location":"guide/cost-management/#cost-calculation","title":"Cost Calculation","text":"<pre><code>total_cost = (input_tokens / 1_000_000 * input_price) + \n             (output_tokens / 1_000_000 * output_price)\n</code></pre> <p>Example: - Task uses 100K input tokens, 50K output tokens - With Claude: (0.1 \u00d7 $3) + (0.05 \u00d7 $15) = $1.05 - With Q Chat: (0.1 \u00d7 $0.50) + (0.05 \u00d7 $1.50) = $0.125</p>"},{"location":"guide/cost-management/#cost-control-mechanisms","title":"Cost Control Mechanisms","text":""},{"location":"guide/cost-management/#1-hard-limits","title":"1. Hard Limits","text":"<p>Set maximum spending caps:</p> <pre><code># Strict $10 limit\npython ralph_orchestrator.py --max-cost 10.0\n\n# Conservative token limit\npython ralph_orchestrator.py --max-tokens 100000\n</code></pre>"},{"location":"guide/cost-management/#2-context-management","title":"2. Context Management","text":"<p>Reduce token usage through smart context handling:</p> <pre><code># Aggressive context management\npython ralph_orchestrator.py \\\n  --context-window 50000 \\\n  --context-threshold 0.6  # Summarize at 60% full\n</code></pre>"},{"location":"guide/cost-management/#3-agent-selection","title":"3. Agent Selection","text":"<p>Choose cost-effective agents:</p> <pre><code># Development: Use cheaper agents\npython ralph_orchestrator.py --agent q --max-cost 5.0\n\n# Production: Use quality agents with limits\npython ralph_orchestrator.py --agent claude --max-cost 50.0\n</code></pre>"},{"location":"guide/cost-management/#optimization-strategies","title":"Optimization Strategies","text":""},{"location":"guide/cost-management/#1-tiered-agent-strategy","title":"1. Tiered Agent Strategy","text":"<p>Use different agents for different task phases:</p> <pre><code># Phase 1: Research with Q (cheap)\necho \"Research the problem\" &gt; research.md\npython ralph_orchestrator.py --agent q --prompt research.md --max-cost 2.0\n\n# Phase 2: Implementation with Claude (quality)\necho \"Implement the solution\" &gt; implement.md\npython ralph_orchestrator.py --agent claude --prompt implement.md --max-cost 20.0\n\n# Phase 3: Testing with Q (cheap)\necho \"Test the solution\" &gt; test.md\npython ralph_orchestrator.py --agent q --prompt test.md --max-cost 2.0\n</code></pre>"},{"location":"guide/cost-management/#2-prompt-optimization","title":"2. Prompt Optimization","text":"<p>Reduce token usage through efficient prompts:</p>"},{"location":"guide/cost-management/#before-expensive","title":"Before (Expensive)","text":"<pre><code>Please create a comprehensive web application with the following features:\n- User authentication system with registration, login, password reset\n- Dashboard with charts and graphs\n- API with full CRUD operations\n- Complete test suite\n- Detailed documentation\n[... 5000 tokens of requirements ...]\n</code></pre>"},{"location":"guide/cost-management/#after-optimized","title":"After (Optimized)","text":"<pre><code>Build user auth API:\n- Register/login endpoints\n- JWT tokens\n- PostgreSQL storage\n- Basic tests\nSee spec.md for details.\n</code></pre>"},{"location":"guide/cost-management/#3-context-window-management","title":"3. Context Window Management","text":""},{"location":"guide/cost-management/#automatic-summarization","title":"Automatic Summarization","text":"<pre><code># Trigger summarization early to save tokens\npython ralph_orchestrator.py \\\n  --context-window 100000 \\\n  --context-threshold 0.5  # Summarize at 50%\n</code></pre>"},{"location":"guide/cost-management/#manual-context-control","title":"Manual Context Control","text":"<pre><code>## Context Management\nWhen context reaches 50%, summarize:\n- Keep only essential information\n- Remove completed task details\n- Compress verbose outputs\n</code></pre>"},{"location":"guide/cost-management/#4-iteration-optimization","title":"4. Iteration Optimization","text":"<p>Fewer, smarter iterations save money:</p> <pre><code># Many quick iterations (expensive)\npython ralph_orchestrator.py --max-iterations 100  # \u274c\n\n# Fewer, focused iterations (economical)\npython ralph_orchestrator.py --max-iterations 20   # \u2705\n</code></pre>"},{"location":"guide/cost-management/#cost-monitoring","title":"Cost Monitoring","text":""},{"location":"guide/cost-management/#real-time-tracking","title":"Real-time Tracking","text":"<p>Monitor costs during execution:</p> <pre><code># Verbose cost reporting\npython ralph_orchestrator.py \\\n  --verbose \\\n  --metrics-interval 1\n</code></pre> <p>Output: <pre><code>[INFO] Iteration 5: Tokens: 25,000 | Cost: $1.25 | Remaining: $48.75\n</code></pre></p>"},{"location":"guide/cost-management/#cost-reports","title":"Cost Reports","text":"<p>Access detailed cost breakdowns:</p> <pre><code>import json\nfrom pathlib import Path\n\n# Load metrics\nmetrics_dir = Path('.agent/metrics')\ntotal_cost = 0\n\nfor metric_file in metrics_dir.glob('metrics_*.json'):\n    with open(metric_file) as f:\n        data = json.load(f)\n        total_cost += data.get('cost', 0)\n\nprint(f\"Total cost: ${total_cost:.2f}\")\n</code></pre>"},{"location":"guide/cost-management/#cost-dashboards","title":"Cost Dashboards","text":"<p>Create monitoring dashboards:</p> <pre><code>#!/usr/bin/env python3\nimport json\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\n\ncosts = []\niterations = []\n\nfor metric_file in sorted(Path('.agent/metrics').glob('*.json')):\n    with open(metric_file) as f:\n        data = json.load(f)\n        costs.append(data.get('total_cost', 0))\n        iterations.append(data.get('iteration', 0))\n\nplt.plot(iterations, costs)\nplt.xlabel('Iteration')\nplt.ylabel('Cumulative Cost ($)')\nplt.title('Ralph Orchestrator Cost Progression')\nplt.savefig('cost_report.png')\n</code></pre>"},{"location":"guide/cost-management/#budget-planning","title":"Budget Planning","text":""},{"location":"guide/cost-management/#task-cost-estimation","title":"Task Cost Estimation","text":"Task Type Complexity Recommended Budget Agent Simple Script Low $0.50 - $2 Q Chat Web API Medium $5 - $20 Gemini/Claude Full Application High $20 - $100 Claude Data Analysis Medium $5 - $15 Gemini Documentation Low-Medium $2 - $10 Q/Claude Debugging Variable $5 - $50 Claude"},{"location":"guide/cost-management/#monthly-budget-planning","title":"Monthly Budget Planning","text":"<pre><code># Calculate monthly budget needs\ntasks_per_month = 50\navg_cost_per_task = 10.0\nsafety_margin = 1.5\n\nmonthly_budget = tasks_per_month * avg_cost_per_task * safety_margin\nprint(f\"Recommended monthly budget: ${monthly_budget}\")\n</code></pre>"},{"location":"guide/cost-management/#cost-optimization-profiles","title":"Cost Optimization Profiles","text":""},{"location":"guide/cost-management/#minimal-cost-profile","title":"Minimal Cost Profile","text":"<p>Maximum savings, acceptable quality:</p> <pre><code>python ralph_orchestrator.py \\\n  --agent q \\\n  --max-tokens 50000 \\\n  --max-cost 2.0 \\\n  --context-window 30000 \\\n  --context-threshold 0.5 \\\n  --checkpoint-interval 10\n</code></pre>"},{"location":"guide/cost-management/#balanced-profile","title":"Balanced Profile","text":"<p>Good quality, reasonable cost:</p> <pre><code>python ralph_orchestrator.py \\\n  --agent gemini \\\n  --max-tokens 200000 \\\n  --max-cost 10.0 \\\n  --context-window 100000 \\\n  --context-threshold 0.7 \\\n  --checkpoint-interval 5\n</code></pre>"},{"location":"guide/cost-management/#quality-profile","title":"Quality Profile","text":"<p>Best results, controlled spending:</p> <pre><code>python ralph_orchestrator.py \\\n  --agent claude \\\n  --max-tokens 500000 \\\n  --max-cost 50.0 \\\n  --context-window 200000 \\\n  --context-threshold 0.8 \\\n  --checkpoint-interval 3\n</code></pre>"},{"location":"guide/cost-management/#advanced-cost-management","title":"Advanced Cost Management","text":""},{"location":"guide/cost-management/#dynamic-agent-switching","title":"Dynamic Agent Switching","text":"<p>Switch agents based on budget remaining:</p> <pre><code># Pseudo-code for dynamic switching\nif remaining_budget &gt; 20:\n    agent = \"claude\"\nelif remaining_budget &gt; 5:\n    agent = \"gemini\"\nelse:\n    agent = \"q\"\n</code></pre>"},{"location":"guide/cost-management/#cost-aware-prompts","title":"Cost-Aware Prompts","text":"<p>Include cost considerations in prompts:</p> <pre><code>## Budget Constraints\n- Maximum budget: $10\n- Optimize for efficiency\n- Skip non-essential features if approaching limit\n- Prioritize core functionality\n</code></pre>"},{"location":"guide/cost-management/#batch-processing","title":"Batch Processing","text":"<p>Combine multiple small tasks:</p> <pre><code># Inefficient: Multiple orchestrations\npython ralph_orchestrator.py --prompt task1.md  # $5\npython ralph_orchestrator.py --prompt task2.md  # $5\npython ralph_orchestrator.py --prompt task3.md  # $5\n# Total: $15\n\n# Efficient: Batched orchestration\ncat task1.md task2.md task3.md &gt; batch.md\npython ralph_orchestrator.py --prompt batch.md  # $10\n# Total: $10 (33% savings)\n</code></pre>"},{"location":"guide/cost-management/#cost-alerts","title":"Cost Alerts","text":""},{"location":"guide/cost-management/#setting-up-alerts","title":"Setting Up Alerts","text":"<pre><code>#!/bin/bash\n# cost_monitor.sh\n\nCOST_LIMIT=25.0\nCURRENT_COST=$(python -c \"\nimport json\nwith open('.agent/metrics/state_latest.json') as f:\n    print(json.load(f)['total_cost'])\n\")\n\nif (( $(echo \"$CURRENT_COST &gt; $COST_LIMIT\" | bc -l) )); then\n    echo \"ALERT: Cost exceeded $COST_LIMIT\" | mail -s \"Ralph Cost Alert\" admin@example.com\nfi\n</code></pre>"},{"location":"guide/cost-management/#automated-stops","title":"Automated Stops","text":"<p>Implement circuit breakers:</p> <pre><code># cost_breaker.py\nimport json\nimport sys\n\nwith open('.agent/metrics/state_latest.json') as f:\n    state = json.load(f)\n\nif state['total_cost'] &gt; state['max_cost'] * 0.9:\n    print(\"WARNING: 90% of budget consumed\")\n    sys.exit(1)\n</code></pre>"},{"location":"guide/cost-management/#roi-analysis","title":"ROI Analysis","text":""},{"location":"guide/cost-management/#calculating-roi","title":"Calculating ROI","text":"<pre><code># ROI calculation\nhours_saved = 10  # Hours of manual work saved\nhourly_rate = 50  # Developer hourly rate\nai_cost = 25  # Cost of AI orchestration\n\nvalue_created = hours_saved * hourly_rate\nroi = (value_created - ai_cost) / ai_cost * 100\n\nprint(f\"Value created: ${value_created}\")\nprint(f\"AI cost: ${ai_cost}\")\nprint(f\"ROI: {roi:.1f}%\")\n</code></pre>"},{"location":"guide/cost-management/#cost-benefit-matrix","title":"Cost-Benefit Matrix","text":"Task Manual Hours Manual Cost AI Cost Savings API Development 40h $2000 $50 $1950 Documentation 20h $1000 $20 $980 Testing Suite 30h $1500 $30 $1470 Bug Fixing 10h $500 $25 $475"},{"location":"guide/cost-management/#best-practices","title":"Best Practices","text":""},{"location":"guide/cost-management/#1-start-small","title":"1. Start Small","text":"<p>Test with minimal budgets first:</p> <pre><code># Test run\npython ralph_orchestrator.py --max-cost 1.0 --max-iterations 5\n\n# Scale up if successful\npython ralph_orchestrator.py --max-cost 10.0 --max-iterations 50\n</code></pre>"},{"location":"guide/cost-management/#2-monitor-continuously","title":"2. Monitor Continuously","text":"<p>Track costs in real-time:</p> <pre><code># Terminal 1: Run orchestration\npython ralph_orchestrator.py --verbose\n\n# Terminal 2: Monitor costs\nwatch -n 5 'tail -n 20 .agent/metrics/state_latest.json'\n</code></pre>"},{"location":"guide/cost-management/#3-optimize-iteratively","title":"3. Optimize Iteratively","text":"<ul> <li>Analyze cost reports</li> <li>Identify expensive operations</li> <li>Refine prompts and settings</li> <li>Test optimizations</li> </ul>"},{"location":"guide/cost-management/#4-set-realistic-budgets","title":"4. Set Realistic Budgets","text":"<ul> <li>Development: 50% of production budget</li> <li>Testing: 25% of production budget</li> <li>Production: Full budget with safety margin</li> </ul>"},{"location":"guide/cost-management/#5-document-costs","title":"5. Document Costs","text":"<p>Keep records for analysis:</p> <pre><code># Save cost report after each run\npython ralph_orchestrator.py &amp;&amp; \\\n  cp .agent/metrics/state_latest.json \"reports/run_$(date +%Y%m%d_%H%M%S).json\"\n</code></pre>"},{"location":"guide/cost-management/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guide/cost-management/#common-issues","title":"Common Issues","text":"<ol> <li>Unexpected high costs</li> <li>Check token usage in metrics</li> <li>Review prompt efficiency</li> <li> <p>Verify context settings</p> </li> <li> <p>Budget exceeded quickly</p> </li> <li>Lower context window</li> <li>Increase summarization threshold</li> <li> <p>Use cheaper agent</p> </li> <li> <p>Poor results with budget constraints</p> </li> <li>Increase budget slightly</li> <li>Optimize prompts</li> <li>Consider phased approach</li> </ol>"},{"location":"guide/cost-management/#next-steps","title":"Next Steps","text":"<ul> <li>Review Agent Selection for cost-effective choices</li> <li>Optimize Prompts for efficiency</li> <li>Configure Checkpointing to save progress</li> <li>Explore Examples for cost-optimized patterns</li> </ul>"},{"location":"guide/overview/","title":"Overview","text":""},{"location":"guide/overview/#what-is-ralph-orchestrator","title":"What is Ralph Orchestrator?","text":"<p>Ralph Orchestrator is a production-ready implementation of the Ralph Wiggum orchestration technique for AI agents. It provides a robust framework for running AI agents in a continuous loop until a task is completed, with enterprise-grade safety, monitoring, and cost controls.</p> <p>The system is named after Ralph Wiggum from The Simpsons, embodying the philosophy of persistent iteration: \"Me fail English? That's unpossible!\" - just keep trying until you succeed.</p>"},{"location":"guide/overview/#key-concepts","title":"Key Concepts","text":""},{"location":"guide/overview/#the-ralph-wiggum-technique","title":"The Ralph Wiggum Technique","text":"<p>The Ralph Wiggum technique is a simple yet powerful approach to AI orchestration:</p> <ol> <li>Give the AI a task via a prompt file</li> <li>Let it iterate continuously on the problem</li> <li>Monitor progress through checkpoints and metrics</li> <li>Stop when complete or when limits are reached</li> </ol> <p>This approach leverages the AI's ability to self-correct and improve through multiple iterations, similar to how humans refine their work through multiple drafts.</p>"},{"location":"guide/overview/#core-components","title":"Core Components","text":"<pre><code>graph TB\n    A[Prompt File] --&gt; B[Ralph Orchestrator]\n    B --&gt; C{AI Agent}\n    C --&gt; D[Claude]\n    C --&gt; E[Q Chat]\n    C --&gt; F[Gemini]\n    D --&gt; G[Execute Task]\n    E --&gt; G\n    F --&gt; G\n    G --&gt; H{Task Complete?}\n    H --&gt;|No| B\n    H --&gt;|Yes| I[End]\n    B --&gt; J[Checkpointing]\n    B --&gt; K[Metrics]\n    B --&gt; L[Cost Control]</code></pre>"},{"location":"guide/overview/#how-it-works","title":"How It Works","text":""},{"location":"guide/overview/#1-initialization-phase","title":"1. Initialization Phase","text":"<p>When you start Ralph Orchestrator, it:</p> <ul> <li>Validates the prompt file for security</li> <li>Detects available AI agents</li> <li>Sets up monitoring and metrics collection</li> <li>Creates working directories for checkpoints</li> <li>Initializes cost and token tracking</li> </ul>"},{"location":"guide/overview/#2-iteration-loop","title":"2. Iteration Loop","text":"<p>The main orchestration loop:</p> <ol> <li>Pre-flight checks: Verify token/cost limits haven't been exceeded</li> <li>Context management: Check if context window needs summarization</li> <li>Agent execution: Run the selected AI agent with the prompt</li> <li>Response processing: Capture and analyze the agent's output</li> <li>Metrics collection: Track tokens, costs, and performance</li> <li>Completion check: Look for the <code>TASK_COMPLETE</code> marker</li> <li>Checkpoint: Save state at configured intervals</li> <li>Repeat: Continue until task is complete or limits are reached</li> </ol>"},{"location":"guide/overview/#3-safety-mechanisms","title":"3. Safety Mechanisms","text":"<p>Multiple layers of protection ensure safe operation:</p> <ul> <li>Input validation: Sanitizes prompts to prevent injection attacks</li> <li>Resource limits: Enforces token, cost, and runtime boundaries</li> <li>Context overflow: Automatically summarizes when approaching limits</li> <li>Graceful shutdown: Handles interrupts and saves state</li> <li>Error recovery: Retries with exponential backoff</li> </ul>"},{"location":"guide/overview/#4-completion","title":"4. Completion","text":"<p>When the task completes or limits are reached:</p> <ul> <li>Final metrics are saved</li> <li>State is persisted for analysis</li> <li>Usage statistics are reported</li> <li>Detailed logs are exported</li> </ul>"},{"location":"guide/overview/#use-cases","title":"Use Cases","text":"<p>Ralph Orchestrator excels at:</p>"},{"location":"guide/overview/#software-development","title":"Software Development","text":"<ul> <li>Writing complete applications from specifications</li> <li>Refactoring large codebases</li> <li>Implementing complex features iteratively</li> <li>Debugging difficult issues</li> </ul>"},{"location":"guide/overview/#content-creation","title":"Content Creation","text":"<ul> <li>Writing comprehensive documentation</li> <li>Generating test suites</li> <li>Creating API specifications</li> <li>Developing training materials</li> </ul>"},{"location":"guide/overview/#data-processing","title":"Data Processing","text":"<ul> <li>Analyzing large datasets</li> <li>Generating reports</li> <li>Data transformation pipelines</li> <li>ETL operations</li> </ul>"},{"location":"guide/overview/#research-analysis","title":"Research &amp; Analysis","text":"<ul> <li>Literature reviews</li> <li>Market research</li> <li>Competitive analysis</li> <li>Technical investigations</li> </ul>"},{"location":"guide/overview/#benefits","title":"Benefits","text":""},{"location":"guide/overview/#productivity","title":"\ud83d\ude80 Productivity","text":"<ul> <li>Automate complex, multi-step tasks</li> <li>Reduce human intervention</li> <li>Parallelize work across multiple agents</li> <li>24/7 operation capability</li> </ul>"},{"location":"guide/overview/#cost-management","title":"\ud83d\udcb0 Cost Management","text":"<ul> <li>Real-time cost tracking</li> <li>Configurable spending limits</li> <li>Per-agent pricing models</li> <li>Token usage optimization</li> </ul>"},{"location":"guide/overview/#security","title":"\ud83d\udd12 Security","text":"<ul> <li>Input sanitization</li> <li>Command injection prevention</li> <li>Path traversal protection</li> <li>Audit trails</li> </ul>"},{"location":"guide/overview/#observability","title":"\ud83d\udcca Observability","text":"<ul> <li>Detailed metrics collection</li> <li>Performance monitoring</li> <li>Success/failure tracking</li> <li>Resource utilization</li> </ul>"},{"location":"guide/overview/#reliability","title":"\ud83d\udd04 Reliability","text":"<ul> <li>Automatic retries</li> <li>State persistence</li> <li>Checkpoint recovery</li> <li>Graceful degradation</li> </ul>"},{"location":"guide/overview/#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph LR\n    subgraph \"Input Layer\"\n        A[CLI Arguments]\n        B[Prompt File]\n        C[Configuration]\n    end\n\n    subgraph \"Orchestration Core\"\n        D[Ralph Orchestrator]\n        E[Agent Manager]\n        F[Context Manager]\n        G[Metrics Collector]\n    end\n\n    subgraph \"AI Agents\"\n        H[Claude]\n        I[Q Chat]\n        J[Gemini]\n    end\n\n    subgraph \"Persistence\"\n        K[Git Checkpoints]\n        L[Prompt Archives]\n        M[Metrics Store]\n    end\n\n    A --&gt; D\n    B --&gt; D\n    C --&gt; D\n    D --&gt; E\n    E --&gt; H\n    E --&gt; I\n    E --&gt; J\n    D --&gt; F\n    D --&gt; G\n    D --&gt; K\n    D --&gt; L\n    G --&gt; M</code></pre>"},{"location":"guide/overview/#getting-started","title":"Getting Started","text":"<p>To start using Ralph Orchestrator:</p> <ol> <li>Install the tool and at least one AI agent</li> <li>Create a prompt file with your task</li> <li>Run the orchestrator with appropriate limits</li> <li>Monitor progress through logs and metrics</li> <li>Retrieve results when complete</li> </ol> <p>See the Quick Start guide for detailed instructions.</p>"},{"location":"guide/overview/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Configuration options</li> <li>Understand Agent selection and capabilities</li> <li>Master Prompt engineering for best results</li> <li>Explore Cost Management strategies</li> <li>Set up Checkpointing for recovery</li> </ul>"},{"location":"guide/prompts/","title":"Prompt Engineering Guide","text":"<p>Effective prompt engineering is crucial for successful Ralph Orchestrator tasks. This guide covers best practices, patterns, and techniques for writing prompts that get results.</p>"},{"location":"guide/prompts/#prompt-file-basics","title":"Prompt File Basics","text":""},{"location":"guide/prompts/#file-format","title":"File Format","text":"<p>Ralph Orchestrator uses Markdown files for prompts:</p> <pre><code># Task Title\n\n## Objective\nClear description of what needs to be accomplished.\n\n## Requirements\n- Specific requirement 1\n- Specific requirement 2\n\n## Success Criteria\nThe task is complete when:\n- Criterion 1 is met\n- Criterion 2 is met\n\nWhen finished, add \"TASK_COMPLETE\" to this file.\n</code></pre>"},{"location":"guide/prompts/#file-location","title":"File Location","text":"<p>Default prompt file: <code>PROMPT.md</code></p> <p>Custom location: <pre><code>python ralph_orchestrator.py --prompt path/to/task.md\n</code></pre></p>"},{"location":"guide/prompts/#prompt-structure","title":"Prompt Structure","text":""},{"location":"guide/prompts/#essential-components","title":"Essential Components","text":"<p>Every prompt should include:</p> <ol> <li>Clear Objective</li> <li>Specific Requirements</li> <li>Success Criteria</li> <li>Completion Marker</li> </ol>"},{"location":"guide/prompts/#template","title":"Template","text":"<pre><code># [Task Name]\n\n## Objective\n[One or two sentences describing the goal]\n\n## Context\n[Background information the agent needs]\n\n## Requirements\n1. [Specific requirement]\n2. [Specific requirement]\n3. [Specific requirement]\n\n## Constraints\n- [Limitation or boundary]\n- [Technical constraint]\n- [Resource constraint]\n\n## Success Criteria\nThe task is complete when:\n- [ ] [Measurable outcome]\n- [ ] [Verifiable result]\n- [ ] [Specific deliverable]\n\n## Notes\n[Additional guidance or hints]\n\n---\nWhen the task is fully complete, add \"TASK_COMPLETE\" to this file.\n</code></pre>"},{"location":"guide/prompts/#prompt-patterns","title":"Prompt Patterns","text":""},{"location":"guide/prompts/#1-software-development-pattern","title":"1. Software Development Pattern","text":"<pre><code># Build Web API\n\n## Objective\nCreate a RESTful API for user management with authentication.\n\n## Requirements\n1. Implement user CRUD operations\n2. Add JWT authentication\n3. Include input validation\n4. Write comprehensive tests\n5. Create API documentation\n\n## Technical Specifications\n- Framework: FastAPI\n- Database: PostgreSQL\n- Authentication: JWT tokens\n- Testing: pytest\n\n## Endpoints\n- POST /auth/register\n- POST /auth/login\n- GET /users\n- GET /users/{id}\n- PUT /users/{id}\n- DELETE /users/{id}\n\n## Success Criteria\n- [ ] All endpoints functional\n- [ ] Tests passing with &gt;80% coverage\n- [ ] API documentation generated\n- [ ] Authentication working\n\nWhen complete, add \"TASK_COMPLETE\" to this file.\n</code></pre>"},{"location":"guide/prompts/#2-documentation-pattern","title":"2. Documentation Pattern","text":"<p><pre><code># Create User Documentation\n\n## Objective\nWrite comprehensive user documentation for the application.\n\n## Requirements\n1. Installation guide\n2. Configuration reference\n3. Usage examples\n4. Troubleshooting section\n5. FAQ\n\n## Structure\n</code></pre> docs/ \u251c\u2500\u2500 getting-started.md \u251c\u2500\u2500 installation.md \u251c\u2500\u2500 configuration.md \u251c\u2500\u2500 usage/ \u2502   \u251c\u2500\u2500 basic.md \u2502   \u2514\u2500\u2500 advanced.md \u251c\u2500\u2500 troubleshooting.md \u2514\u2500\u2500 faq.md <pre><code>## Style Guide\n- Use clear, concise language\n- Include code examples\n- Add screenshots where helpful\n- Follow Markdown best practices\n\n## Success Criteria\n- [ ] All sections complete\n- [ ] Examples tested and working\n- [ ] Reviewed for clarity\n- [ ] No broken links\n\nAdd \"TASK_COMPLETE\" when finished.\n</code></pre></p>"},{"location":"guide/prompts/#3-data-analysis-pattern","title":"3. Data Analysis Pattern","text":"<pre><code># Analyze Sales Data\n\n## Objective\nAnalyze Q4 sales data and generate insights report.\n\n## Data Sources\n- sales_data.csv\n- customer_demographics.json\n- product_catalog.xlsx\n\n## Analysis Requirements\n1. Revenue trends by month\n2. Top performing products\n3. Customer segmentation\n4. Regional performance\n5. Year-over-year comparison\n\n## Deliverables\n1. Python analysis script\n2. Jupyter notebook with visualizations\n3. Executive summary (PDF)\n4. Raw data exports\n\n## Success Criteria\n- [ ] All analyses complete\n- [ ] Visualizations created\n- [ ] Insights documented\n- [ ] Code reproducible\n\nMark \"TASK_COMPLETE\" when done.\n</code></pre>"},{"location":"guide/prompts/#4-debugging-pattern","title":"4. Debugging Pattern","text":"<pre><code># Debug Application Issue\n\n## Problem Description\nUsers report application crashes when uploading large files.\n\n## Symptoms\n- Crash occurs with files &gt;100MB\n- Error: \"Memory allocation failed\"\n- Affects 30% of users\n\n## Investigation Steps\n1. Reproduce the issue\n2. Analyze memory usage\n3. Review upload handling code\n4. Check server resources\n5. Examine error logs\n\n## Required Fixes\n- Identify root cause\n- Implement solution\n- Add error handling\n- Write regression tests\n- Update documentation\n\n## Success Criteria\n- [ ] Issue reproduced\n- [ ] Root cause identified\n- [ ] Fix implemented\n- [ ] Tests passing\n- [ ] No regressions\n\nAdd \"TASK_COMPLETE\" after verification.\n</code></pre>"},{"location":"guide/prompts/#best-practices","title":"Best Practices","text":""},{"location":"guide/prompts/#1-be-specific","title":"1. Be Specific","text":"<p>\u274c Bad: <pre><code>Build a website\n</code></pre></p> <p>\u2705 Good: <pre><code>Build a responsive e-commerce website using React and Node.js with:\n- Product catalog with search\n- Shopping cart functionality\n- Stripe payment integration\n- User authentication\n- Order tracking\n</code></pre></p>"},{"location":"guide/prompts/#2-provide-context","title":"2. Provide Context","text":"<p>\u274c Bad: <pre><code>Fix the bug\n</code></pre></p> <p>\u2705 Good: <pre><code>Fix the memory leak in the image processing module that occurs when:\n- Processing images larger than 10MB\n- Multiple images are processed simultaneously\n- The cleanup function in ImageProcessor.process() may not be releasing buffers\n</code></pre></p>"},{"location":"guide/prompts/#3-define-success-clearly","title":"3. Define Success Clearly","text":"<p>\u274c Bad: <pre><code>Make it work better\n</code></pre></p> <p>\u2705 Good: <pre><code>## Success Criteria\n- Response time &lt; 200ms for 95% of requests\n- Memory usage stays below 512MB\n- All unit tests pass\n- No errors in 24-hour stress test\n</code></pre></p>"},{"location":"guide/prompts/#4-include-examples","title":"4. Include Examples","text":"<pre><code>## Example Input/Output\n\nInput:\n```json\n{\n  \"user_id\": 123,\n  \"action\": \"purchase\",\n  \"items\": [\"SKU-001\", \"SKU-002\"]\n}\n</code></pre> <p>Expected Output: <pre><code>{\n  \"order_id\": \"ORD-789\",\n  \"status\": \"confirmed\",\n  \"total\": 99.99,\n  \"estimated_delivery\": \"2024-01-15\"\n}\n</code></pre> <pre><code>### 5. Specify Constraints\n\n```markdown\n## Constraints\n- Must be Python 3.8+ compatible\n- Cannot use external APIs\n- Must complete in under 5 seconds\n- Memory usage &lt; 1GB\n- Must follow PEP 8 style guide\n</code></pre></p>"},{"location":"guide/prompts/#iterative-prompts","title":"Iterative Prompts","text":"<p>Ralph Orchestrator modifies the prompt file during execution. Design prompts that support iteration:</p>"},{"location":"guide/prompts/#self-documenting-progress","title":"Self-Documenting Progress","text":"<pre><code>## Progress Log\n&lt;!-- Agent will update this section --&gt;\n- [ ] Step 1: Setup environment\n- [ ] Step 2: Implement core logic\n- [ ] Step 3: Add tests\n- [ ] Step 4: Documentation\n\n## Current Status\n&lt;!-- Agent updates this --&gt;\nWorking on: [current task]\nCompleted: [list of completed items]\nNext: [planned next step]\n</code></pre>"},{"location":"guide/prompts/#checkpoint-markers","title":"Checkpoint Markers","text":"<pre><code>## Checkpoints\n- [ ] CHECKPOINT_1: Basic structure complete\n- [ ] CHECKPOINT_2: Core functionality working\n- [ ] CHECKPOINT_3: Tests passing\n- [ ] CHECKPOINT_4: Documentation complete\n- [ ] TASK_COMPLETE\n</code></pre>"},{"location":"guide/prompts/#advanced-techniques","title":"Advanced Techniques","text":""},{"location":"guide/prompts/#1-multi-phase-prompts","title":"1. Multi-Phase Prompts","text":"<pre><code># Phase 1: Research\nResearch existing solutions and document findings.\n\n&lt;!-- After Phase 1 complete, update prompt for Phase 2 --&gt;\n\n# Phase 2: Implementation\nBased on research, implement the solution.\n\n# Phase 3: Testing\nComprehensive testing and validation.\n</code></pre>"},{"location":"guide/prompts/#2-conditional-instructions","title":"2. Conditional Instructions","text":"<pre><code>## Implementation\n\nIf using Python:\n- Use type hints\n- Follow PEP 8\n- Use pytest for testing\n\nIf using JavaScript:\n- Use TypeScript\n- Follow Airbnb style guide\n- Use Jest for testing\n</code></pre>"},{"location":"guide/prompts/#3-learning-prompts","title":"3. Learning Prompts","text":"<pre><code>## Approach\n1. First, try the simple solution\n2. If that doesn't work, research alternatives\n3. Document what was learned\n4. Implement the best solution\n\n## Document Learnings\n&lt;!-- Agent fills this during execution --&gt;\n- Attempted: [approach]\n- Result: [outcome]\n- Learning: [insight]\n</code></pre>"},{"location":"guide/prompts/#4-error-recovery","title":"4. Error Recovery","text":"<pre><code>## Error Handling\nIf you encounter errors:\n1. Document the error in this file\n2. Research the solution\n3. Try alternative approaches\n4. Update this prompt with findings\n\n## Error Log\n&lt;!-- Agent updates this --&gt;\n</code></pre>"},{"location":"guide/prompts/#prompt-security","title":"Prompt Security","text":""},{"location":"guide/prompts/#sanitization","title":"Sanitization","text":"<p>Ralph Orchestrator automatically sanitizes prompts for: - Command injection attempts - Path traversal attacks - Malicious patterns</p>"},{"location":"guide/prompts/#safe-patterns","title":"Safe Patterns","text":"<pre><code>## File Operations\nWork only in the ./workspace directory\nDo not modify system files\nCreate backups before changes\n</code></pre>"},{"location":"guide/prompts/#size-limits","title":"Size Limits","text":"<p>Default maximum prompt size: 10MB</p> <p>Adjust if needed: <pre><code>python ralph_orchestrator.py --max-prompt-size 20971520  # 20MB\n</code></pre></p>"},{"location":"guide/prompts/#testing-prompts","title":"Testing Prompts","text":""},{"location":"guide/prompts/#dry-run","title":"Dry Run","text":"<p>Test prompts without execution:</p> <pre><code>python ralph_orchestrator.py --dry-run --prompt test.md\n</code></pre>"},{"location":"guide/prompts/#limited-iterations","title":"Limited Iterations","text":"<p>Test with few iterations:</p> <pre><code>python ralph_orchestrator.py --max-iterations 3 --prompt test.md\n</code></pre>"},{"location":"guide/prompts/#verbose-mode","title":"Verbose Mode","text":"<p>Debug prompt processing:</p> <pre><code>python ralph_orchestrator.py --verbose --prompt test.md\n</code></pre>"},{"location":"guide/prompts/#common-pitfalls","title":"Common Pitfalls","text":""},{"location":"guide/prompts/#1-vague-instructions","title":"1. Vague Instructions","text":"<p>\u274c Avoid: - \"Make it good\" - \"Optimize everything\" - \"Fix all issues\"</p> <p>\u2705 Instead: - \"Achieve 95% test coverage\" - \"Reduce response time to &lt;100ms\" - \"Fix the memory leak in process_image()\"</p>"},{"location":"guide/prompts/#2-missing-completion-criteria","title":"2. Missing Completion Criteria","text":"<p>\u274c Avoid: Forgetting to specify when the task is done</p> <p>\u2705 Instead: Always include clear completion criteria and the TASK_COMPLETE marker</p>"},{"location":"guide/prompts/#3-overly-complex-prompts","title":"3. Overly Complex Prompts","text":"<p>\u274c Avoid: Single prompt with 50+ requirements</p> <p>\u2705 Instead: Break into phases or separate tasks</p>"},{"location":"guide/prompts/#4-no-examples","title":"4. No Examples","text":"<p>\u274c Avoid: Describing desired behavior without examples</p> <p>\u2705 Instead: Include input/output examples and edge cases</p>"},{"location":"guide/prompts/#prompt-library","title":"Prompt Library","text":""},{"location":"guide/prompts/#starter-templates","title":"Starter Templates","text":"<ol> <li>Web API Development</li> <li>CLI Tool Creation</li> <li>Data Analysis</li> <li>Documentation Writing</li> <li>Bug Fixing</li> <li>Testing Suite</li> </ol>"},{"location":"guide/prompts/#next-steps","title":"Next Steps","text":"<ul> <li>Explore Cost Management for efficient prompts</li> <li>Learn about Checkpointing for long tasks</li> <li>Review Agent Selection for optimal results</li> <li>See Examples for real-world prompts</li> </ul>"}]}