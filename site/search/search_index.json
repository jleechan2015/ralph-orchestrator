{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Ralph Orchestrator","text":"## Production-Ready AI Orchestration  *Put your AI agent in a loop until the task is done*  [![Version](https://img.shields.io/badge/version-1.0.0-blue)](https://github.com/mikeyobrien/ralph-orchestrator/releases) [![License](https://img.shields.io/badge/license-MIT-green)](LICENSE) [![Tests](https://img.shields.io/badge/tests-18%20passing-brightgreen)](tests/) [![Python](https://img.shields.io/badge/python-3.8%2B-blue)](https://www.python.org/)  &gt; \"Me fail English? That's unpossible!\" - Ralph Wiggum"},{"location":"#what-is-ralph-orchestrator","title":"What is Ralph Orchestrator?","text":"<p>Ralph Orchestrator is a production-ready implementation of the Ralph Wiggum orchestration technique - a simple yet powerful pattern for autonomous AI task completion. It continuously runs an AI agent against a prompt file until the task is marked as complete or limits are reached.</p> <p>Based on the technique by Geoffrey Huntley, this implementation provides enterprise-grade safety, monitoring, and cost controls suitable for production environments.</p>"},{"location":"#key-features","title":"Key Features","text":"- **\ud83e\udd16 Multi-Agent Support**     Works seamlessly with Claude, Q Chat, and Gemini CLI tools with automatic detection  - **\ud83d\udcb0 Cost Management**     Real-time token tracking, cost calculation, and configurable spending limits  - **\ud83d\udd12 Enterprise Security**     Input sanitization, command injection prevention, and path traversal protection  - **\ud83d\udcca Production Monitoring**     System metrics, performance tracking, and detailed JSON exports  - **\ud83d\udd04 Resilient Execution**     Automatic retries, circuit breakers, and state persistence  - **\ud83d\udcbe Git Checkpointing**     Version control integration for state recovery and history tracking"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code># 1. Create a task prompt\ncat &gt; PROMPT.md &lt;&lt; EOF\nCreate a Python function that calculates the Fibonacci sequence.\nInclude proper documentation and unit tests.\nWhen complete, add \"TASK_COMPLETE\" to this file.\nEOF\n\n# 2. Run Ralph\npython ralph_orchestrator.py --prompt PROMPT.md\n\n# 3. Ralph iterates until the task is done!\n</code></pre>"},{"location":"#why-ralph-orchestrator","title":"Why Ralph Orchestrator?","text":""},{"location":"#the-problem","title":"The Problem","text":"<p>Modern AI agents are powerful but require supervision. They can lose context, make mistakes, or need multiple iterations to complete complex tasks. Manual supervision is time-consuming and error-prone.</p>"},{"location":"#the-solution","title":"The Solution","text":"<p>Ralph Orchestrator automates the iteration loop while maintaining safety and control:</p> <ul> <li>Autonomous Operation: Set it and forget it - Ralph handles the iterations</li> <li>Safety First: Built-in limits prevent runaway costs and infinite loops</li> <li>Production Ready: Battle-tested with comprehensive error handling</li> <li>Observable: Detailed metrics and logging for debugging and optimization</li> <li>Recoverable: Checkpoint system allows resuming from any point</li> </ul>"},{"location":"#use-cases","title":"Use Cases","text":"<p>Ralph Orchestrator excels at:</p> <ul> <li>Code Generation: Building features, fixing bugs, writing tests</li> <li>Documentation: Creating comprehensive docs, API references, tutorials</li> <li>Data Processing: ETL pipelines, data analysis, report generation</li> <li>Automation: CI/CD setup, deployment scripts, infrastructure as code</li> <li>Research: Information gathering, summarization, analysis</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Ready to put Ralph to work? Check out our Quick Start Guide to get up and running in minutes.</p>"},{"location":"#production-features","title":"Production Features","text":"<p>Ralph Orchestrator is designed for production use with:</p> <ul> <li>Token &amp; Cost Limits: Prevent budget overruns</li> <li>Context Management: Handle large prompts intelligently</li> <li>Security Controls: Protect against malicious inputs</li> <li>Monitoring &amp; Metrics: Track performance and usage</li> <li>Error Recovery: Graceful handling of failures</li> <li>State Persistence: Resume interrupted tasks</li> </ul> <p>Learn more in our Production Deployment Guide.</p>"},{"location":"#community-support","title":"Community &amp; Support","text":"<ul> <li>\ud83d\udcd6 Documentation</li> <li>\ud83d\udc1b Issue Tracker</li> <li>\ud83d\udcac Discussions</li> <li>\ud83e\udd1d Contributing Guide</li> </ul>"},{"location":"#license","title":"License","text":"<p>Ralph Orchestrator is open source software licensed as MIT.</p> Built with \u2764\ufe0f by the Ralph Orchestrator community"},{"location":"contributing/","title":"Contributing to Ralph Orchestrator","text":"<p>Thank you for your interest in contributing to Ralph Orchestrator! This guide will help you get started with contributing to the project.</p>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>By participating in this project, you agree to abide by our Code of Conduct. Please read it before contributing.</p>"},{"location":"contributing/#ways-to-contribute","title":"Ways to Contribute","text":""},{"location":"contributing/#1-report-bugs","title":"1. Report Bugs","text":"<p>Found a bug? Help us fix it:</p> <ol> <li>Check existing issues to avoid duplicates</li> <li>Create a new issue with:</li> <li>Clear title and description</li> <li>Steps to reproduce</li> <li>Expected vs actual behavior</li> <li>System information</li> <li>Error messages/logs</li> </ol> <p>Bug Report Template: <pre><code>## Description\nBrief description of the bug\n\n## Steps to Reproduce\n1. Run command: `python ralph_orchestrator.py ...`\n2. See error\n\n## Expected Behavior\nWhat should happen\n\n## Actual Behavior\nWhat actually happens\n\n## Environment\n- OS: [e.g., Ubuntu 22.04]\n- Python: [e.g., 3.10.5]\n- Ralph Version: [e.g., 1.0.0]\n- AI Agent: [e.g., claude]\n\n## Logs\n</code></pre> Error messages here <pre><code>\n</code></pre></p>"},{"location":"contributing/#2-suggest-features","title":"2. Suggest Features","text":"<p>Have an idea? We'd love to hear it:</p> <ol> <li>Check existing feature requests</li> <li>Open a discussion for major changes</li> <li>Create a feature request with:</li> <li>Use case description</li> <li>Proposed solution</li> <li>Alternative approaches</li> <li>Implementation considerations</li> </ol>"},{"location":"contributing/#3-improve-documentation","title":"3. Improve Documentation","text":"<p>Documentation improvements are always welcome:</p> <ul> <li>Fix typos and grammar</li> <li>Clarify confusing sections</li> <li>Add missing information</li> <li>Create new examples</li> <li>Translate documentation</li> </ul>"},{"location":"contributing/#4-contribute-code","title":"4. Contribute Code","text":"<p>Ready to code? Follow these steps:</p>"},{"location":"contributing/#setup-development-environment","title":"Setup Development Environment","text":"<pre><code># Fork and clone the repository\ngit clone https://github.com/YOUR_USERNAME/ralph-orchestrator.git\ncd ralph-orchestrator\n\n# Create a virtual environment\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n\n# Install development dependencies\npip install -e .\npip install pytest pytest-cov black ruff\n\n# Install pre-commit hooks (optional)\npip install pre-commit\npre-commit install\n</code></pre>"},{"location":"contributing/#development-workflow","title":"Development Workflow","text":"<ol> <li> <p>Create a branch <pre><code>git checkout -b feature/your-feature-name\n# or\ngit checkout -b fix/issue-number\n</code></pre></p> </li> <li> <p>Make changes</p> </li> <li>Follow existing code style</li> <li>Add/update tests</li> <li> <p>Update documentation</p> </li> <li> <p>Test your changes <pre><code># Run all tests\npytest\n\n# Run specific test\npytest test_orchestrator.py::test_function\n\n# Check coverage\npytest --cov=ralph_orchestrator --cov-report=html\n</code></pre></p> </li> <li> <p>Format code <pre><code># Format with black\nblack ralph_orchestrator.py\n\n# Lint with ruff\nruff check ralph_orchestrator.py\n</code></pre></p> </li> <li> <p>Commit changes <pre><code>git add .\ngit commit -m \"feat: add new feature\"\n# Use conventional commits: feat, fix, docs, test, refactor, style, chore\n</code></pre></p> </li> <li> <p>Push and create PR <pre><code>git push origin feature/your-feature-name\n</code></pre></p> </li> </ol>"},{"location":"contributing/#development-guidelines","title":"Development Guidelines","text":""},{"location":"contributing/#code-style","title":"Code Style","text":"<p>We follow PEP 8 with these preferences:</p> <ul> <li>Line length: 88 characters (Black default)</li> <li>Quotes: Double quotes for strings</li> <li>Imports: Sorted with <code>isort</code></li> <li>Type hints: Use where beneficial</li> <li>Docstrings: Google style</li> </ul> <p>Example: <pre><code>def calculate_cost(\n    input_tokens: int,\n    output_tokens: int,\n    agent_type: str = \"claude\"\n) -&gt; float:\n    \"\"\"\n    Calculate token usage cost.\n\n    Args:\n        input_tokens: Number of input tokens\n        output_tokens: Number of output tokens\n        agent_type: Type of AI agent\n\n    Returns:\n        Cost in USD\n\n    Raises:\n        ValueError: If agent_type is unknown\n    \"\"\"\n    if agent_type not in TOKEN_COSTS:\n        raise ValueError(f\"Unknown agent: {agent_type}\")\n\n    rates = TOKEN_COSTS[agent_type]\n    cost = (input_tokens * rates[\"input\"] + \n            output_tokens * rates[\"output\"]) / 1_000_000\n    return round(cost, 4)\n</code></pre></p>"},{"location":"contributing/#testing-guidelines","title":"Testing Guidelines","text":"<p>All new features require tests:</p> <ol> <li>Unit tests for individual functions</li> <li>Integration tests for workflows</li> <li>Edge cases and error conditions</li> <li>Documentation of test purpose</li> </ol> <p>Test Example: <pre><code>def test_calculate_cost():\n    \"\"\"Test cost calculation for different agents.\"\"\"\n    # Test Claude pricing\n    cost = calculate_cost(1000, 500, \"claude\")\n    assert cost == 0.0105\n\n    # Test invalid agent\n    with pytest.raises(ValueError):\n        calculate_cost(1000, 500, \"invalid\")\n\n    # Test edge case: zero tokens\n    cost = calculate_cost(0, 0, \"claude\")\n    assert cost == 0.0\n</code></pre></p>"},{"location":"contributing/#commit-message-convention","title":"Commit Message Convention","text":"<p>We use Conventional Commits:</p> <ul> <li><code>feat:</code> New feature</li> <li><code>fix:</code> Bug fix</li> <li><code>docs:</code> Documentation changes</li> <li><code>test:</code> Test additions/changes</li> <li><code>refactor:</code> Code refactoring</li> <li><code>style:</code> Code style changes</li> <li><code>chore:</code> Maintenance tasks</li> <li><code>perf:</code> Performance improvements</li> </ul> <p>Examples: <pre><code>feat: add Gemini agent support\nfix: resolve token overflow in long prompts\ndocs: update installation guide for Windows\ntest: add integration tests for checkpointing\nrefactor: extract prompt validation logic\n</code></pre></p>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Title: Use conventional commit format</li> <li>Description: Explain what and why</li> <li>Testing: Describe testing performed</li> <li>Screenshots: Include if UI changes</li> <li>Checklist: Complete PR template</li> </ol> <p>PR Template: <pre><code>## Description\nBrief description of changes\n\n## Type of Change\n- [ ] Bug fix\n- [ ] New feature\n- [ ] Documentation update\n- [ ] Performance improvement\n\n## Testing\n- [ ] All tests pass\n- [ ] Added new tests\n- [ ] Manual testing performed\n\n## Checklist\n- [ ] Code follows style guidelines\n- [ ] Self-reviewed code\n- [ ] Updated documentation\n- [ ] No breaking changes\n</code></pre></p>"},{"location":"contributing/#project-structure","title":"Project Structure","text":"<pre><code>ralph-orchestrator/\n\u251c\u2500\u2500 ralph_orchestrator.py   # Main orchestrator\n\u251c\u2500\u2500 ralph                   # CLI wrapper\n\u251c\u2500\u2500 tests/                  # Test files\n\u2502   \u251c\u2500\u2500 test_orchestrator.py\n\u2502   \u251c\u2500\u2500 test_integration.py\n\u2502   \u2514\u2500\u2500 test_production.py\n\u251c\u2500\u2500 docs/                   # Documentation\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u251c\u2500\u2500 guide/\n\u2502   \u2514\u2500\u2500 api/\n\u251c\u2500\u2500 examples/               # Example prompts\n\u251c\u2500\u2500 .agent/                 # Runtime data\n\u2514\u2500\u2500 .github/               # GitHub configs\n</code></pre>"},{"location":"contributing/#testing","title":"Testing","text":""},{"location":"contributing/#run-tests","title":"Run Tests","text":"<pre><code># All tests\npytest\n\n# With coverage\npytest --cov=ralph_orchestrator\n\n# Specific test file\npytest test_orchestrator.py\n\n# Verbose output\npytest -v\n\n# Stop on first failure\npytest -x\n</code></pre>"},{"location":"contributing/#test-categories","title":"Test Categories","text":"<ol> <li>Unit Tests: Test individual functions</li> <li>Integration Tests: Test component interaction</li> <li>E2E Tests: Test complete workflows</li> <li>Performance Tests: Test resource usage</li> <li>Security Tests: Test input validation</li> </ol>"},{"location":"contributing/#documentation","title":"Documentation","text":""},{"location":"contributing/#building-docs-locally","title":"Building Docs Locally","text":"<pre><code># Install MkDocs\npip install mkdocs mkdocs-material\n\n# Serve locally\nmkdocs serve\n\n# Build static site\nmkdocs build\n</code></pre>"},{"location":"contributing/#documentation-standards","title":"Documentation Standards","text":"<ul> <li>Clear, concise language</li> <li>Code examples for all features</li> <li>Explain the \"why\" not just \"how\"</li> <li>Keep examples up-to-date</li> <li>Include troubleshooting tips</li> </ul>"},{"location":"contributing/#release-process","title":"Release Process","text":"<ol> <li>Version Bump: Update version in code</li> <li>Changelog: Update CHANGELOG.md</li> <li>Tests: Ensure all tests pass</li> <li>Documentation: Update if needed</li> <li>Tag: Create version tag</li> <li>Release: Create GitHub release</li> </ol>"},{"location":"contributing/#getting-help","title":"Getting Help","text":""},{"location":"contributing/#for-contributors","title":"For Contributors","text":"<ul> <li>\ud83d\udcac Discord Server</li> <li>\ud83d\udce7 Email Maintainers</li> <li>\ud83d\udde3\ufe0f GitHub Discussions</li> </ul>"},{"location":"contributing/#resources","title":"Resources","text":"<ul> <li>Development Setup Video</li> <li>Architecture Overview</li> <li>API Documentation</li> <li>Testing Guide</li> </ul>"},{"location":"contributing/#recognition","title":"Recognition","text":"<p>Contributors are recognized in:</p> <ul> <li>CONTRIBUTORS.md</li> <li>Release notes</li> <li>Documentation credits</li> </ul>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing, you agree that your contributions will be licensed under the MIT License.</p> <p>Thank you for contributing to Ralph Orchestrator! \ud83c\udf89</p>"},{"location":"installation/","title":"Installation Guide","text":"<p>Comprehensive installation instructions for Ralph Orchestrator.</p>"},{"location":"installation/#system-requirements","title":"System Requirements","text":""},{"location":"installation/#minimum-requirements","title":"Minimum Requirements","text":"<ul> <li>Python: 3.8 or higher</li> <li>Memory: 512 MB RAM</li> <li>Disk: 100 MB free space</li> <li>OS: Linux, macOS, or Windows</li> </ul>"},{"location":"installation/#recommended-requirements","title":"Recommended Requirements","text":"<ul> <li>Python: 3.10 or higher</li> <li>Memory: 2 GB RAM</li> <li>Disk: 1 GB free space</li> <li>Git: For checkpoint features</li> <li>Network: Stable internet connection</li> </ul>"},{"location":"installation/#installation-methods","title":"Installation Methods","text":""},{"location":"installation/#method-1-git-clone-recommended","title":"Method 1: Git Clone (Recommended)","text":"<pre><code># Clone the repository\ngit clone https://github.com/mikeyobrien/ralph-orchestrator.git\ncd ralph-orchestrator\n\n# Make the orchestrator executable\nchmod +x ralph_orchestrator.py\nchmod +x ralph\n\n# Install optional dependencies\npip install psutil  # For system metrics\n</code></pre>"},{"location":"installation/#method-2-direct-download","title":"Method 2: Direct Download","text":"<pre><code># Download the latest release\nwget https://github.com/mikeyobrien/ralph-orchestrator/archive/refs/tags/v1.0.0.tar.gz\n\n# Extract the archive\ntar -xzf v1.0.0.tar.gz\ncd ralph-orchestrator-1.0.0\n\n# Make executable\nchmod +x ralph_orchestrator.py\n</code></pre>"},{"location":"installation/#method-3-pip-install-coming-soon","title":"Method 3: pip Install (Coming Soon)","text":"<pre><code># Future installation via pip\npip install ralph-orchestrator\n</code></pre>"},{"location":"installation/#ai-agent-installation","title":"AI Agent Installation","text":"<p>Ralph requires at least one AI agent to function. Choose and install one or more:</p>"},{"location":"installation/#claude-anthropic","title":"Claude (Anthropic)","text":"<p>Claude is the recommended agent for most use cases.</p> <pre><code># Install via npm\nnpm install -g @anthropic-ai/claude-code\n\n# Or download from\n# https://claude.ai/code\n\n# Verify installation\nclaude --version\n</code></pre> <p>Configuration: <pre><code># Set your API key (if required)\nexport ANTHROPIC_API_KEY=\"your-api-key-here\"\n</code></pre></p>"},{"location":"installation/#q-chat","title":"Q Chat","text":"<p>Q Chat is a lightweight alternative agent.</p> <pre><code># Install via pip\npip install q-cli\n\n# Or clone from repository\ngit clone https://github.com/qchat/qchat.git\ncd qchat\npython setup.py install\n\n# Verify installation\nq --version\n</code></pre> <p>Configuration: <pre><code># Configure Q Chat\nq config --set api_key=\"your-api-key\"\n</code></pre></p>"},{"location":"installation/#gemini-google","title":"Gemini (Google)","text":"<p>Gemini provides access to Google's AI models.</p> <pre><code># Install via npm\nnpm install -g @google/gemini-cli\n\n# Verify installation\ngemini --version\n</code></pre> <p>Configuration: <pre><code># Set your API key\nexport GEMINI_API_KEY=\"your-api-key-here\"\n\n# Or use config file\ngemini config set api_key \"your-api-key\"\n</code></pre></p>"},{"location":"installation/#dependency-installation","title":"Dependency Installation","text":""},{"location":"installation/#required-python-packages","title":"Required Python Packages","text":"<p>Ralph Orchestrator has minimal dependencies, but some features require additional packages:</p> <pre><code># Core functionality (no additional packages needed)\n# Ralph uses only Python standard library for core features\n\n# Optional: System metrics monitoring\npip install psutil\n\n# Optional: Enhanced JSON handling\npip install orjson  # Faster JSON processing\n\n# Optional: Development dependencies\npip install pytest pytest-cov black ruff\n</code></pre>"},{"location":"installation/#using-requirementstxt","title":"Using requirements.txt","text":"<p>If you want to install all optional dependencies:</p> <pre><code># Create requirements.txt\ncat &gt; requirements.txt &lt;&lt; EOF\npsutil&gt;=5.9.0\norjson&gt;=3.9.0\npytest&gt;=7.0.0\npytest-cov&gt;=4.0.0\nblack&gt;=23.0.0\nruff&gt;=0.1.0\nEOF\n\n# Install all dependencies\npip install -r requirements.txt\n</code></pre>"},{"location":"installation/#using-uv-recommended-for-development","title":"Using uv (Recommended for Development)","text":"<pre><code># Install uv\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Install dependencies with uv\nuv pip install psutil orjson\n\n# Or use pyproject.toml\nuv sync\n</code></pre>"},{"location":"installation/#verification","title":"Verification","text":""},{"location":"installation/#verify-installation","title":"Verify Installation","text":"<p>Run these commands to verify your installation:</p> <pre><code># Check Python version\npython --version  # Should be 3.8+\n\n# Check Ralph Orchestrator\npython ralph_orchestrator.py --version\n\n# Check for available agents\npython ralph_orchestrator.py --list-agents\n\n# Run a test\necho \"Say hello and add TASK_COMPLETE\" &gt; test.md\npython ralph_orchestrator.py --prompt test.md --dry-run\n</code></pre>"},{"location":"installation/#expected-output","title":"Expected Output","text":"<pre><code>Ralph Orchestrator v1.0.0\nPython 3.10.12\nAvailable agents: claude, q, gemini\nDry run completed successfully\n</code></pre>"},{"location":"installation/#platform-specific-instructions","title":"Platform-Specific Instructions","text":""},{"location":"installation/#linux","title":"Linux","text":"<pre><code># Ubuntu/Debian\nsudo apt update\nsudo apt install python3 python3-pip git\n\n# Fedora/RHEL\nsudo dnf install python3 python3-pip git\n\n# Arch Linux\nsudo pacman -S python python-pip git\n</code></pre>"},{"location":"installation/#macos","title":"macOS","text":"<pre><code># Using Homebrew\nbrew install python git\n\n# Using MacPorts\nsudo port install python310 git\n\n# Verify Python installation\npython3 --version\n</code></pre>"},{"location":"installation/#windows","title":"Windows","text":"<pre><code># Using PowerShell as Administrator\n\n# Install Python from Microsoft Store\nwinget install Python.Python.3.11\n\n# Or download from python.org\n# https://www.python.org/downloads/windows/\n\n# Install Git\nwinget install Git.Git\n\n# Clone Ralph\ngit clone https://github.com/mikeyobrien/ralph-orchestrator.git\ncd ralph-orchestrator\n\n# Run Ralph\npython ralph_orchestrator.py --prompt PROMPT.md\n</code></pre>"},{"location":"installation/#docker-alternative","title":"Docker (Alternative)","text":"<pre><code># Dockerfile\nFROM python:3.11-slim\n\nWORKDIR /app\nCOPY . /app\n\nRUN pip install psutil\n\n# Install your preferred AI agent\nRUN npm install -g @anthropic-ai/claude-code\n\nCMD [\"python\", \"ralph_orchestrator.py\"]\n</code></pre> <pre><code># Build and run\ndocker build -t ralph-orchestrator .\ndocker run -v $(pwd):/app ralph-orchestrator --prompt PROMPT.md\n</code></pre>"},{"location":"installation/#configuration-files","title":"Configuration Files","text":""},{"location":"installation/#basic-configuration","title":"Basic Configuration","text":"<p>Create a configuration file for default settings:</p> <pre><code># Create .ralph.conf\ncat &gt; .ralph.conf &lt;&lt; EOF\n# Default Ralph Configuration\nagent=claude\nmax_iterations=100\nmax_runtime=14400\ncheckpoint_interval=5\nverbose=false\nEOF\n</code></pre>"},{"location":"installation/#environment-variables","title":"Environment Variables","text":"<p>Set environment variables for common settings:</p> <pre><code># Add to your ~/.bashrc or ~/.zshrc\nexport RALPH_AGENT=\"claude\"\nexport RALPH_MAX_ITERATIONS=\"100\"\nexport RALPH_MAX_COST=\"50.0\"\nexport RALPH_VERBOSE=\"false\"\n</code></pre>"},{"location":"installation/#troubleshooting-installation","title":"Troubleshooting Installation","text":""},{"location":"installation/#common-issues","title":"Common Issues","text":""},{"location":"installation/#python-version-too-old","title":"Python Version Too Old","text":"<pre><code>ERROR: Python 3.8+ required, found 3.7.3\n</code></pre> <p>Solution: Upgrade Python <pre><code># Ubuntu/Debian\nsudo apt install python3.10\n\n# macOS\nbrew upgrade python\n\n# Windows\nwinget upgrade Python.Python.3.11\n</code></pre></p>"},{"location":"installation/#agent-not-found","title":"Agent Not Found","text":"<pre><code>ERROR: No AI agents detected\n</code></pre> <p>Solution: Install at least one agent <pre><code>npm install -g @anthropic-ai/claude-code\n# or\npip install q-cli\n</code></pre></p>"},{"location":"installation/#permission-denied","title":"Permission Denied","text":"<pre><code>Permission denied: './ralph_orchestrator.py'\n</code></pre> <p>Solution: Make executable <pre><code>chmod +x ralph_orchestrator.py\nchmod +x ralph\n</code></pre></p>"},{"location":"installation/#module-not-found","title":"Module Not Found","text":"<pre><code>ModuleNotFoundError: No module named 'psutil'\n</code></pre> <p>Solution: Install optional dependencies <pre><code>pip install psutil\n</code></pre></p>"},{"location":"installation/#uninstallation","title":"Uninstallation","text":"<p>To remove Ralph Orchestrator:</p> <pre><code># Remove the directory\nrm -rf ralph-orchestrator\n\n# Uninstall optional dependencies\npip uninstall psutil orjson\n\n# Remove configuration files\nrm ~/.ralph.conf\n</code></pre>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<p>After installation:</p> <ol> <li>Read the Quick Start Guide</li> <li>Configure your AI Agents</li> <li>Learn about Configuration Options</li> <li>Try the Examples</li> </ol>"},{"location":"installation/#getting-help","title":"Getting Help","text":"<p>If you encounter issues:</p> <ul> <li>Check the FAQ</li> <li>Read Troubleshooting</li> <li>Open an issue on GitHub</li> <li>Join the discussions</li> </ul> <p>\ud83d\udcda Continue to the User Guide \u2192</p>"},{"location":"quick-start/","title":"Quick Start Guide","text":"<p>Get Ralph Orchestrator up and running in 5 minutes!</p>"},{"location":"quick-start/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have:</p> <ul> <li>Python 3.8 or higher</li> <li>Git (for checkpointing features)</li> <li>At least one AI CLI tool installed</li> </ul>"},{"location":"quick-start/#step-1-install-an-ai-agent","title":"Step 1: Install an AI Agent","text":"<p>Ralph works with multiple AI agents. Install at least one:</p> Claude (Recommended)Q ChatGemini <pre><code>npm install -g @anthropic-ai/claude-code\n# Or visit https://claude.ai/code for setup instructions\n</code></pre> <pre><code>pip install q-cli\n# Or follow instructions at https://github.com/qchat/qchat\n</code></pre> <pre><code>npm install -g @google/gemini-cli\n# Configure with your API key\n</code></pre>"},{"location":"quick-start/#step-2-clone-ralph-orchestrator","title":"Step 2: Clone Ralph Orchestrator","text":"<pre><code># Clone the repository\ngit clone https://github.com/mikeyobrien/ralph-orchestrator.git\ncd ralph-orchestrator\n\n# Install optional dependencies for monitoring\npip install psutil  # Recommended for system metrics\n</code></pre>"},{"location":"quick-start/#step-3-create-your-first-task","title":"Step 3: Create Your First Task","text":"<p>Create a <code>PROMPT.md</code> file with your task:</p> <pre><code># Task: Create a Todo List CLI\n\nBuild a Python command-line todo list application with:\n- Add tasks\n- List tasks\n- Mark tasks as complete\n- Save tasks to a JSON file\n\nInclude proper error handling and a help command.\n\nWhen the implementation is complete and tested, add \"TASK_COMPLETE\" to this file.\n</code></pre>"},{"location":"quick-start/#step-4-run-ralph","title":"Step 4: Run Ralph","text":"<pre><code># Basic execution (auto-detects available agent)\npython ralph_orchestrator.py --prompt PROMPT.md\n\n# Or specify an agent explicitly\npython ralph_orchestrator.py --agent claude --prompt PROMPT.md\n</code></pre>"},{"location":"quick-start/#step-5-monitor-progress","title":"Step 5: Monitor Progress","text":"<p>Ralph will now: 1. Read your prompt file 2. Execute the AI agent 3. Check for completion 4. Iterate until done or limits reached</p> <p>You'll see output like: <pre><code>2025-09-08 10:30:45 - INFO - Starting Ralph Orchestrator v1.0.0\n2025-09-08 10:30:45 - INFO - Using agent: claude\n2025-09-08 10:30:45 - INFO - Starting iteration 1/100\n2025-09-08 10:30:52 - INFO - Iteration 1 complete\n2025-09-08 10:30:52 - INFO - Task not complete, continuing...\n</code></pre></p>"},{"location":"quick-start/#what-happens-next","title":"What Happens Next?","text":"<p>Ralph will continue iterating until one of these conditions is met:</p> <ul> <li>\u2705 The task is marked complete (TASK_COMPLETE found in prompt)</li> <li>\u23f1\ufe0f Maximum iterations reached (default: 100)</li> <li>\u23f0 Maximum runtime exceeded (default: 4 hours)</li> <li>\ud83d\udcb0 Token or cost limits reached</li> <li>\u274c Unrecoverable error occurs</li> </ul>"},{"location":"quick-start/#basic-configuration","title":"Basic Configuration","text":"<p>Control Ralph's behavior with command-line options:</p> <pre><code># Limit iterations\npython ralph_orchestrator.py --prompt PROMPT.md --max-iterations 50\n\n# Set cost limit\npython ralph_orchestrator.py --prompt PROMPT.md --max-cost 10.0\n\n# Enable verbose logging\npython ralph_orchestrator.py --prompt PROMPT.md --verbose\n\n# Dry run (test without executing)\npython ralph_orchestrator.py --prompt PROMPT.md --dry-run\n</code></pre>"},{"location":"quick-start/#example-tasks","title":"Example Tasks","text":""},{"location":"quick-start/#simple-function","title":"Simple Function","text":"<pre><code>Write a Python function that validates email addresses using regex.\nInclude comprehensive unit tests.\n</code></pre>"},{"location":"quick-start/#web-scraper","title":"Web Scraper","text":"<pre><code>Create a web scraper that:\n1. Fetches the HackerNews homepage\n2. Extracts the top 10 stories\n3. Saves them to a JSON file\nUse requests and BeautifulSoup.\n</code></pre>"},{"location":"quick-start/#cli-tool","title":"CLI Tool","text":"<pre><code>Build a markdown to HTML converter CLI tool:\n- Accept input/output file arguments\n- Support basic markdown syntax\n- Add --watch mode for auto-conversion\n</code></pre>"},{"location":"quick-start/#next-steps","title":"Next Steps","text":"<p>Now that you've run your first Ralph task:</p> <ul> <li>\ud83d\udcd6 Read the User Guide for detailed configuration</li> <li>\ud83d\udd12 Learn about Security Features</li> <li>\ud83d\udcb0 Understand Cost Management</li> <li>\ud83d\udcca Set up Monitoring</li> <li>\ud83d\ude80 Deploy to Production</li> </ul>"},{"location":"quick-start/#troubleshooting","title":"Troubleshooting","text":""},{"location":"quick-start/#agent-not-found","title":"Agent Not Found","text":"<p>If Ralph can't find an AI agent: <pre><code>ERROR: No AI agents detected. Please install claude, q, or gemini.\n</code></pre></p> <p>Solution: Install one of the supported agents (see Step 1)</p>"},{"location":"quick-start/#permission-denied","title":"Permission Denied","text":"<p>If you get permission errors: <pre><code>chmod +x ralph_orchestrator.py\n</code></pre></p>"},{"location":"quick-start/#task-not-completing","title":"Task Not Completing","text":"<p>If your task runs indefinitely: - Check that your prompt includes clear completion criteria - Ensure the agent can add \"TASK_COMPLETE\" to the prompt file - Review iteration logs in <code>.agent/metrics/</code></p>"},{"location":"quick-start/#getting-help","title":"Getting Help","text":"<ul> <li>Check the FAQ</li> <li>Read the Troubleshooting Guide</li> <li>Open an issue on GitHub</li> <li>Join the discussions</li> </ul> <p>\ud83c\udf89 Congratulations! You've successfully run your first Ralph orchestration!</p>"},{"location":"api/orchestrator/","title":"Orchestrator API Reference","text":"<p>Complete API documentation for the Ralph Orchestrator core module.</p>"},{"location":"api/orchestrator/#module-ralph_orchestrator","title":"Module: <code>ralph_orchestrator</code>","text":"<p>The main orchestration module that implements the Ralph Wiggum technique.</p>"},{"location":"api/orchestrator/#classes","title":"Classes","text":""},{"location":"api/orchestrator/#ralphorchestrator","title":"<code>RalphOrchestrator</code>","text":"<p>The main orchestrator class that manages the iteration loop.</p> <pre><code>class RalphOrchestrator:\n    \"\"\"\n    Orchestrates AI agent iterations for autonomous task completion.\n\n    Attributes:\n        config (RalphConfig): Configuration object\n        agent (Agent): Active AI agent instance\n        metrics (MetricsCollector): Metrics tracking\n        state (OrchestratorState): Current state\n    \"\"\"\n</code></pre>"},{"location":"api/orchestrator/#constructor","title":"Constructor","text":"<pre><code>def __init__(self, config: RalphConfig) -&gt; None:\n    \"\"\"\n    Initialize the orchestrator with configuration.\n\n    Args:\n        config: RalphConfig object with settings\n\n    Raises:\n        ValueError: If configuration is invalid\n        RuntimeError: If no agents are available\n    \"\"\"\n</code></pre>"},{"location":"api/orchestrator/#methods","title":"Methods","text":""},{"location":"api/orchestrator/#run","title":"<code>run()</code>","text":"<pre><code>def run(self) -&gt; int:\n    \"\"\"\n    Execute the main orchestration loop.\n\n    Returns:\n        int: Exit code (0 for success, non-zero for failure)\n\n    Raises:\n        SecurityError: If security validation fails\n        RuntimeError: If unrecoverable error occurs\n    \"\"\"\n</code></pre>"},{"location":"api/orchestrator/#iterate","title":"<code>iterate()</code>","text":"<pre><code>def iterate(self) -&gt; bool:\n    \"\"\"\n    Execute a single iteration.\n\n    Returns:\n        bool: True if task is complete, False otherwise\n\n    Raises:\n        AgentError: If agent execution fails\n        TokenLimitError: If token limit exceeded\n        CostLimitError: If cost limit exceeded\n    \"\"\"\n</code></pre>"},{"location":"api/orchestrator/#checkpoint","title":"<code>checkpoint()</code>","text":"<pre><code>def checkpoint(self) -&gt; None:\n    \"\"\"\n    Create a Git checkpoint of current state.\n\n    Raises:\n        GitError: If Git operations fail\n    \"\"\"\n</code></pre>"},{"location":"api/orchestrator/#save_state","title":"<code>save_state()</code>","text":"<pre><code>def save_state(self) -&gt; None:\n    \"\"\"\n    Persist current state to disk.\n\n    The state includes:\n    - Current iteration number\n    - Token usage\n    - Cost accumulation\n    - Timestamps\n    - Agent information\n    \"\"\"\n</code></pre>"},{"location":"api/orchestrator/#load_state","title":"<code>load_state()</code>","text":"<pre><code>def load_state(self) -&gt; Optional[OrchestratorState]:\n    \"\"\"\n    Load previous state from disk.\n\n    Returns:\n        OrchestratorState or None if no state exists\n    \"\"\"\n</code></pre>"},{"location":"api/orchestrator/#ralphconfig","title":"<code>RalphConfig</code>","text":"<p>Configuration dataclass for the orchestrator.</p> <pre><code>@dataclass\nclass RalphConfig:\n    \"\"\"\n    Configuration for Ralph orchestrator.\n\n    All parameters can be set via:\n    - Command-line arguments\n    - Environment variables (RALPH_*)\n    - Configuration file (.ralph.conf)\n    - Default values\n    \"\"\"\n\n    # Agent configuration\n    agent: AgentType = AgentType.AUTO\n    agent_args: List[str] = field(default_factory=list)\n\n    # File paths\n    prompt_file: str = \"PROMPT.md\"\n\n    # Iteration limits\n    max_iterations: int = 100\n    max_runtime: int = 14400  # 4 hours\n\n    # Token and cost limits\n    max_tokens: int = 1000000  # 1M tokens\n    max_cost: float = 50.0  # $50 USD\n\n    # Context management\n    context_window: int = 200000  # 200K tokens\n    context_threshold: float = 0.8  # 80% trigger\n\n    # Checkpointing\n    checkpoint_interval: int = 5\n    git_checkpoint: bool = True\n    archive_prompts: bool = True\n\n    # Retry configuration\n    retry_delay: int = 2\n    max_retries: int = 3\n\n    # Monitoring\n    metrics_interval: int = 10\n    enable_metrics: bool = True\n\n    # Security\n    max_prompt_size: int = 10485760  # 10MB\n    allow_unsafe_paths: bool = False\n\n    # Output\n    verbose: bool = False\n    dry_run: bool = False\n</code></pre>"},{"location":"api/orchestrator/#orchestratorstate","title":"<code>OrchestratorState</code>","text":"<p>State tracking for the orchestrator.</p> <pre><code>@dataclass\nclass OrchestratorState:\n    \"\"\"\n    Orchestrator state for persistence and recovery.\n    \"\"\"\n\n    # Iteration tracking\n    current_iteration: int = 0\n    total_iterations: int = 0\n\n    # Time tracking\n    start_time: datetime = field(default_factory=datetime.now)\n    last_iteration_time: Optional[datetime] = None\n    total_runtime: float = 0.0\n\n    # Token tracking\n    total_input_tokens: int = 0\n    total_output_tokens: int = 0\n\n    # Cost tracking\n    total_cost: float = 0.0\n\n    # Agent information\n    agent_type: str = \"\"\n    agent_version: Optional[str] = None\n\n    # Completion status\n    is_complete: bool = False\n    completion_reason: Optional[str] = None\n</code></pre>"},{"location":"api/orchestrator/#functions","title":"Functions","text":""},{"location":"api/orchestrator/#detect_agents","title":"<code>detect_agents()</code>","text":"<pre><code>def detect_agents() -&gt; List[AgentType]:\n    \"\"\"\n    Detect available AI agents on the system.\n\n    Returns:\n        List of available AgentType enums\n\n    Example:\n        &gt;&gt;&gt; detect_agents()\n        [AgentType.CLAUDE, AgentType.GEMINI]\n    \"\"\"\n</code></pre>"},{"location":"api/orchestrator/#validate_prompt_file","title":"<code>validate_prompt_file()</code>","text":"<pre><code>def validate_prompt_file(\n    file_path: str, \n    max_size: int = DEFAULT_MAX_PROMPT_SIZE\n) -&gt; None:\n    \"\"\"\n    Validate prompt file for security and size.\n\n    Args:\n        file_path: Path to prompt file\n        max_size: Maximum allowed file size in bytes\n\n    Raises:\n        FileNotFoundError: If file doesn't exist\n        SecurityError: If file contains dangerous patterns\n        ValueError: If file exceeds size limit\n    \"\"\"\n</code></pre>"},{"location":"api/orchestrator/#sanitize_input","title":"<code>sanitize_input()</code>","text":"<pre><code>def sanitize_input(text: str) -&gt; str:\n    \"\"\"\n    Sanitize input text for security.\n\n    Args:\n        text: Input text to sanitize\n\n    Returns:\n        Sanitized text safe for processing\n\n    Example:\n        &gt;&gt;&gt; sanitize_input(\"rm -rf /; echo 'done'\")\n        \"rm -rf _; echo 'done'\"\n    \"\"\"\n</code></pre>"},{"location":"api/orchestrator/#calculate_cost","title":"<code>calculate_cost()</code>","text":"<pre><code>def calculate_cost(\n    input_tokens: int,\n    output_tokens: int,\n    agent_type: AgentType\n) -&gt; float:\n    \"\"\"\n    Calculate cost based on token usage.\n\n    Args:\n        input_tokens: Number of input tokens\n        output_tokens: Number of output tokens\n        agent_type: Type of agent used\n\n    Returns:\n        Cost in USD\n\n    Example:\n        &gt;&gt;&gt; calculate_cost(1000, 500, AgentType.CLAUDE)\n        0.0105  # $0.0105\n    \"\"\"\n</code></pre>"},{"location":"api/orchestrator/#exceptions","title":"Exceptions","text":""},{"location":"api/orchestrator/#orchestratorerror","title":"<code>OrchestratorError</code>","text":"<p>Base exception for orchestrator errors.</p> <pre><code>class OrchestratorError(Exception):\n    \"\"\"Base exception for orchestrator errors.\"\"\"\n    pass\n</code></pre>"},{"location":"api/orchestrator/#securityerror","title":"<code>SecurityError</code>","text":"<pre><code>class SecurityError(OrchestratorError):\n    \"\"\"Raised when security validation fails.\"\"\"\n    pass\n</code></pre>"},{"location":"api/orchestrator/#tokenlimiterror","title":"<code>TokenLimitError</code>","text":"<pre><code>class TokenLimitError(OrchestratorError):\n    \"\"\"Raised when token limit is exceeded.\"\"\"\n    pass\n</code></pre>"},{"location":"api/orchestrator/#costlimiterror","title":"<code>CostLimitError</code>","text":"<pre><code>class CostLimitError(OrchestratorError):\n    \"\"\"Raised when cost limit is exceeded.\"\"\"\n    pass\n</code></pre>"},{"location":"api/orchestrator/#agenterror","title":"<code>AgentError</code>","text":"<pre><code>class AgentError(OrchestratorError):\n    \"\"\"Raised when agent execution fails.\"\"\"\n    pass\n</code></pre>"},{"location":"api/orchestrator/#constants","title":"Constants","text":"<pre><code># Version\nVERSION = \"1.0.0\"\n\n# Default values\nDEFAULT_MAX_ITERATIONS = 100\nDEFAULT_MAX_RUNTIME = 14400  # 4 hours\nDEFAULT_PROMPT_FILE = \"PROMPT.md\"\nDEFAULT_CHECKPOINT_INTERVAL = 5\nDEFAULT_RETRY_DELAY = 2\nDEFAULT_MAX_TOKENS = 1000000  # 1M tokens\nDEFAULT_MAX_COST = 50.0  # $50 USD\nDEFAULT_CONTEXT_WINDOW = 200000  # 200K tokens\nDEFAULT_CONTEXT_THRESHOLD = 0.8  # 80%\nDEFAULT_METRICS_INTERVAL = 10\nDEFAULT_MAX_PROMPT_SIZE = 10485760  # 10MB\n\n# Token costs per million\nTOKEN_COSTS = {\n    \"claude\": {\"input\": 3.0, \"output\": 15.0},\n    \"q\": {\"input\": 0.5, \"output\": 1.5},\n    \"gemini\": {\"input\": 0.5, \"output\": 1.5}\n}\n\n# Completion markers\nCOMPLETION_MARKERS = [\"TASK_COMPLETE\", \"TASK_DONE\", \"COMPLETE\"]\n\n# Security patterns\nDANGEROUS_PATTERNS = [\n    r\"rm\\s+-rf\\s+/\",\n    r\":(){ :|:&amp; };:\",\n    r\"dd\\s+if=/dev/zero\",\n    r\"mkfs\\.\",\n    r\"format\\s+[cC]:\",\n]\n</code></pre>"},{"location":"api/orchestrator/#usage-examples","title":"Usage Examples","text":""},{"location":"api/orchestrator/#basic-usage","title":"Basic Usage","text":"<pre><code>from ralph_orchestrator import RalphOrchestrator, RalphConfig\n\n# Create configuration\nconfig = RalphConfig(\n    agent=AgentType.CLAUDE,\n    prompt_file=\"task.md\",\n    max_iterations=50,\n    max_cost=25.0\n)\n\n# Initialize orchestrator\norchestrator = RalphOrchestrator(config)\n\n# Run orchestration\nexit_code = orchestrator.run()\n</code></pre>"},{"location":"api/orchestrator/#custom-configuration","title":"Custom Configuration","text":"<pre><code># Load from environment and add overrides\nconfig = RalphConfig()\nconfig.max_iterations = 100\nconfig.checkpoint_interval = 10\nconfig.verbose = True\n\n# Initialize with custom config\norchestrator = RalphOrchestrator(config)\n</code></pre>"},{"location":"api/orchestrator/#state-management","title":"State Management","text":"<pre><code># Save state manually\norchestrator.save_state()\n\n# Load previous state\nstate = orchestrator.load_state()\nif state:\n    print(f\"Resuming from iteration {state.current_iteration}\")\n</code></pre>"},{"location":"api/orchestrator/#error-handling","title":"Error Handling","text":"<pre><code>try:\n    orchestrator = RalphOrchestrator(config)\n    exit_code = orchestrator.run()\nexcept SecurityError as e:\n    print(f\"Security violation: {e}\")\nexcept TokenLimitError as e:\n    print(f\"Token limit exceeded: {e}\")\nexcept CostLimitError as e:\n    print(f\"Cost limit exceeded: {e}\")\nexcept Exception as e:\n    print(f\"Unexpected error: {e}\")\n</code></pre>"},{"location":"api/orchestrator/#thread-safety","title":"Thread Safety","text":"<p>The orchestrator is not thread-safe. If you need concurrent execution:</p> <ol> <li>Create separate orchestrator instances</li> <li>Use different working directories</li> <li>Implement external synchronization</li> </ol>"},{"location":"api/orchestrator/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Memory usage: ~50MB base + agent overhead</li> <li>Disk I/O: Checkpoints create Git commits</li> <li>Network: Agent API calls may have latency</li> <li>CPU: Minimal overhead (&lt;1% between iterations)</li> </ul>"},{"location":"api/orchestrator/#see-also","title":"See Also","text":"<ul> <li>Configuration API</li> <li>Agent API</li> <li>Metrics API</li> <li>CLI Reference</li> </ul> <p>\ud83d\udcda Continue to Configuration API \u2192</p>"},{"location":"examples/","title":"Examples","text":"<p>Learn how to use Ralph Orchestrator through practical examples.</p>"},{"location":"examples/#quick-examples","title":"Quick Examples","text":""},{"location":"examples/#hello-world","title":"Hello World","text":"<p>The simplest possible Ralph task:</p> <pre><code># PROMPT.md\nWrite a Python function that prints \"Hello, World!\"\nSave it to hello.py and add TASK_COMPLETE when done.\n</code></pre> <p>Run with: <pre><code>python ralph_orchestrator.py --prompt PROMPT.md --max-iterations 5\n</code></pre></p>"},{"location":"examples/#basic-math-function","title":"Basic Math Function","text":"<p>Generate a calculator module:</p> <pre><code># PROMPT.md\nCreate a Python calculator module with:\n- Functions for add, subtract, multiply, divide\n- Error handling for division by zero\n- Docstrings for all functions\n- Save to calculator.py\n\nWhen complete, add TASK_COMPLETE.\n</code></pre>"},{"location":"examples/#complete-examples","title":"Complete Examples","text":"<p>Explore our detailed example guides:</p>"},{"location":"examples/#simple-task","title":"\ud83d\udcdd Simple Task","text":"<p>Build a command-line todo list application with file persistence.</p>"},{"location":"examples/#web-api","title":"\ud83c\udf10 Web API","text":"<p>Create a RESTful API with Flask, including authentication and database integration.</p>"},{"location":"examples/#cli-tool","title":"\ud83d\udee0\ufe0f CLI Tool","text":"<p>Develop a feature-rich command-line tool with argument parsing and configuration.</p>"},{"location":"examples/#data-analysis","title":"\ud83d\udcca Data Analysis","text":"<p>Process CSV data, generate statistics, and create visualizations.</p>"},{"location":"examples/#example-categories","title":"Example Categories","text":""},{"location":"examples/#code-generation","title":"Code Generation","text":"<p>Use Case: Automatically generate boilerplate code, utilities, or entire modules.</p> <pre><code>Create a Python logging utility with:\n- Colored console output\n- File rotation\n- JSON formatting option\n- Multiple log levels\n</code></pre>"},{"location":"examples/#testing","title":"Testing","text":"<p>Use Case: Generate comprehensive test suites for existing code.</p> <pre><code>Write pytest tests for the user_auth.py module:\n- Test all public functions\n- Include edge cases\n- Mock external dependencies\n- Aim for 100% coverage\n</code></pre>"},{"location":"examples/#documentation","title":"Documentation","text":"<p>Use Case: Create or update project documentation.</p> <pre><code>Generate comprehensive API documentation for this project:\n- Document all public classes and functions\n- Include usage examples\n- Create a getting started guide\n- Format as Markdown\n</code></pre>"},{"location":"examples/#refactoring","title":"Refactoring","text":"<p>Use Case: Improve code quality and structure.</p> <pre><code>Refactor the data_processor.py file:\n- Split large functions (&gt;50 lines)\n- Extract common patterns\n- Add type hints\n- Improve variable names\n- Maintain functionality\n</code></pre>"},{"location":"examples/#bug-fixing","title":"Bug Fixing","text":"<p>Use Case: Identify and fix issues in code.</p> <pre><code>Debug and fix the payment processing module:\n- The calculate_tax() function returns wrong values\n- Payment status isn't updating correctly\n- Add logging to trace the issue\n- Write tests to prevent regression\n</code></pre>"},{"location":"examples/#data-processing","title":"Data Processing","text":"<p>Use Case: Transform and analyze data files.</p> <pre><code>Process sales_data.csv:\n- Clean missing values\n- Calculate monthly totals\n- Find top 10 products\n- Generate summary statistics\n- Export results to report.json\n</code></pre>"},{"location":"examples/#best-practices-for-examples","title":"Best Practices for Examples","text":""},{"location":"examples/#1-clear-objectives","title":"1. Clear Objectives","text":"<p>Always specify exactly what you want:</p> <p>\u2705 Good: <pre><code>Create a REST API endpoint that:\n- Accepts POST requests to /api/users\n- Validates email and password\n- Returns JWT token on success\n- Uses SQLite for storage\n</code></pre></p> <p>\u274c Bad: <pre><code>Make a user API\n</code></pre></p>"},{"location":"examples/#2-include-constraints","title":"2. Include Constraints","text":"<p>Specify limitations and requirements:</p> <pre><code>Build a web scraper that:\n- Uses only standard library (no pip installs)\n- Respects robots.txt\n- Implements rate limiting (1 request/second)\n- Handles errors gracefully\n</code></pre>"},{"location":"examples/#3-define-success-criteria","title":"3. Define Success Criteria","text":"<p>Make completion conditions explicit:</p> <pre><code>Task is complete when:\n1. All tests pass (run: pytest test_calculator.py)\n2. Code follows PEP 8 (run: flake8 calculator.py)\n3. Documentation is complete\n4. TASK_COMPLETE is added to this file\n</code></pre>"},{"location":"examples/#4-provide-context","title":"4. Provide Context","text":"<p>Include relevant information:</p> <pre><code>Context: We're building a microservice for order processing.\nExisting files: models.py, database.py\n\nCreate an order validation module that:\n- Integrates with existing models\n- Validates against business rules\n- Returns detailed error messages\n</code></pre>"},{"location":"examples/#running-examples","title":"Running Examples","text":""},{"location":"examples/#basic-execution","title":"Basic Execution","text":"<pre><code># Run with default settings\npython ralph_orchestrator.py --prompt examples/simple-task.md\n</code></pre>"},{"location":"examples/#with-cost-limits","title":"With Cost Limits","text":"<pre><code># Limit spending\npython ralph_orchestrator.py \\\n  --prompt examples/web-api.md \\\n  --max-cost 5.0 \\\n  --max-tokens 100000\n</code></pre>"},{"location":"examples/#using-specific-agents","title":"Using Specific Agents","text":"<pre><code># Use Claude for complex tasks\npython ralph_orchestrator.py \\\n  --agent claude \\\n  --prompt examples/cli-tool.md\n\n# Use Gemini for research tasks\npython ralph_orchestrator.py \\\n  --agent gemini \\\n  --prompt examples/data-analysis.md\n</code></pre>"},{"location":"examples/#development-mode","title":"Development Mode","text":"<pre><code># Verbose output with frequent checkpoints\npython ralph_orchestrator.py \\\n  --prompt examples/simple-task.md \\\n  --verbose \\\n  --checkpoint-interval 1 \\\n  --max-iterations 10\n</code></pre>"},{"location":"examples/#example-prompt-templates","title":"Example Prompt Templates","text":""},{"location":"examples/#web-application","title":"Web Application","text":"<p><pre><code># Task: Create [Application Name]\n\n## Requirements\n- Framework: [Flask/FastAPI/Django]\n- Database: [SQLite/PostgreSQL/MongoDB]\n- Authentication: [JWT/Session/OAuth]\n\n## Features\n1. [Feature 1]\n2. [Feature 2]\n3. [Feature 3]\n\n## File Structure\n</code></pre> project/ \u251c\u2500\u2500 app.py \u251c\u2500\u2500 models.py \u251c\u2500\u2500 routes.py \u2514\u2500\u2500 tests/ <pre><code>## Completion Criteria\n- All endpoints working\n- Tests passing\n- Documentation complete\n- TASK_COMPLETE added\n</code></pre></p>"},{"location":"examples/#data-processing_1","title":"Data Processing","text":"<pre><code># Task: Process [Data Description]\n\n## Input\n- File: [filename.csv]\n- Format: [CSV/JSON/XML]\n- Size: [approximate size]\n\n## Processing Steps\n1. [Step 1: Load and validate]\n2. [Step 2: Clean and transform]\n3. [Step 3: Analyze]\n4. [Step 4: Export results]\n\n## Output\n- Format: [JSON/CSV/Report]\n- Include: [metrics, visualizations, etc.]\n\n## Success Criteria\n- No errors during processing\n- Output validates against schema\n- Performance: &lt; [X] seconds\n- TASK_COMPLETE added\n</code></pre>"},{"location":"examples/#cli-tool_1","title":"CLI Tool","text":"<pre><code># Task: Build [Tool Name] CLI\n\n## Commands\n- `tool command1` - [description]\n- `tool command2` - [description]\n\n## Options\n- `--option1` - [description]\n- `--option2` - [description]\n\n## Requirements\n- Argument parsing with argparse\n- Configuration file support\n- Colored output\n- Progress bars for long operations\n\n## Examples\n```bash\ntool process --input file.txt --output result.json\ntool analyze --verbose\n</code></pre>"},{"location":"examples/#completion","title":"Completion","text":"<ul> <li>All commands working</li> <li>Help text complete</li> <li>Error handling robust</li> <li>TASK_COMPLETE added ```</li> </ul>"},{"location":"examples/#learning-from-examples","title":"Learning from Examples","text":""},{"location":"examples/#study-the-patterns","title":"Study the Patterns","text":"<ol> <li>Prompt Structure: How successful prompts are organized</li> <li>Iteration Counts: Typical iterations for different task types</li> <li>Token Usage: Costs for various complexities</li> <li>Completion Time: Expected runtime for tasks</li> </ol>"},{"location":"examples/#experiment","title":"Experiment","text":"<ol> <li>Start with provided examples</li> <li>Modify them for your needs</li> <li>Compare different approaches</li> <li>Share successful patterns</li> </ol>"},{"location":"examples/#contributing-examples","title":"Contributing Examples","text":"<p>Have a great example? Share it:</p> <ol> <li>Create a new example file</li> <li>Document the use case</li> <li>Include expected results</li> <li>Submit a pull request</li> </ol>"},{"location":"examples/#troubleshooting-examples","title":"Troubleshooting Examples","text":""},{"location":"examples/#task-not-completing","title":"Task Not Completing","text":"<p>If examples run indefinitely: - Check completion criteria clarity - Verify agent can modify files - Review iteration logs - Adjust max iterations</p>"},{"location":"examples/#high-costs","title":"High Costs","text":"<p>If examples are expensive: - Use simpler prompts - Set token limits - Choose appropriate agents - Enable context management</p>"},{"location":"examples/#poor-results","title":"Poor Results","text":"<p>If output quality is low: - Provide more context - Include examples in prompt - Specify constraints clearly - Use more capable agents</p>"},{"location":"examples/#next-steps","title":"Next Steps","text":"<ul> <li>Try the Simple Task Example</li> <li>Explore Web API Example</li> <li>Build a CLI Tool</li> <li>Analyze Data</li> </ul> <p>\ud83d\udcda Continue to Simple Task Example \u2192</p>"},{"location":"guide/overview/","title":"User Guide Overview","text":"<p>Welcome to the Ralph Orchestrator User Guide! This comprehensive guide will help you master all aspects of Ralph Orchestrator, from basic usage to advanced configurations.</p>"},{"location":"guide/overview/#what-youll-learn","title":"What You'll Learn","text":"<p>This guide covers:</p> <ul> <li>Configuration: How to customize Ralph's behavior</li> <li>AI Agents: Working with different AI providers</li> <li>Prompts: Writing effective prompts for better results</li> <li>Checkpointing: Using Git integration for state management</li> <li>Cost Management: Controlling token usage and expenses</li> </ul>"},{"location":"guide/overview/#how-ralph-works","title":"How Ralph Works","text":""},{"location":"guide/overview/#the-orchestration-loop","title":"The Orchestration Loop","text":"<p>Ralph Orchestrator implements a simple but powerful pattern:</p> <pre><code>graph LR\n    A[Read Prompt] --&gt; B[Execute Agent]\n    B --&gt; C{Task Complete?}\n    C --&gt;|No| D[Check Limits]\n    D --&gt;|OK| A\n    D --&gt;|Exceeded| E[Stop]\n    C --&gt;|Yes| E[Stop]\n</code></pre>"},{"location":"guide/overview/#core-components","title":"Core Components","text":"<ol> <li>Prompt File: Your task description that evolves during execution</li> <li>AI Agent: The AI model that processes the prompt</li> <li>Orchestrator: The control loop that manages iterations</li> <li>Checkpoints: Git commits that save progress</li> <li>Metrics: Performance and cost tracking</li> </ol>"},{"location":"guide/overview/#basic-workflow","title":"Basic Workflow","text":""},{"location":"guide/overview/#1-create-a-prompt","title":"1. Create a Prompt","text":"<p>Write your task in a markdown file:</p> <pre><code># Task: Build a REST API\n\nCreate a Flask REST API with:\n- User authentication\n- CRUD operations for products\n- SQLite database\n- OpenAPI documentation\n\nWhen complete, add TASK_COMPLETE.\n</code></pre>"},{"location":"guide/overview/#2-run-ralph","title":"2. Run Ralph","text":"<p>Execute the orchestrator:</p> <pre><code>python ralph_orchestrator.py --prompt task.md\n</code></pre>"},{"location":"guide/overview/#3-monitor-progress","title":"3. Monitor Progress","text":"<p>Ralph provides real-time feedback:</p> <pre><code>Iteration 1/100: Agent processing...\nTokens used: 1,234 (Cost: $0.05)\nContext usage: 45% of window\nCheckpoint saved at iteration 5\n</code></pre>"},{"location":"guide/overview/#4-review-results","title":"4. Review Results","text":"<p>Check the outputs: - Modified prompt file with solution - Generated code files - Checkpoint history in Git - Metrics in <code>.agent/metrics/</code></p>"},{"location":"guide/overview/#configuration-hierarchy","title":"Configuration Hierarchy","text":"<p>Ralph uses a hierarchical configuration system:</p> <ol> <li>Command-line arguments (highest priority)</li> <li>Environment variables (<code>RALPH_*</code>)</li> <li>Configuration file (<code>.ralph.conf</code>)</li> <li>Default values (lowest priority)</li> </ol> <p>Example: <pre><code># Command line overrides all\npython ralph_orchestrator.py --max-iterations 50\n\n# Environment variable\nexport RALPH_MAX_ITERATIONS=75\n\n# Config file\necho \"max_iterations=100\" &gt; .ralph.conf\n\n# Final value used: 50 (command line wins)\n</code></pre></p>"},{"location":"guide/overview/#key-concepts","title":"Key Concepts","text":""},{"location":"guide/overview/#iterations","title":"Iterations","text":"<p>Each iteration consists of: 1. Reading the current prompt 2. Executing the AI agent 3. Checking for completion 4. Updating metrics 5. Creating checkpoints (if interval reached)</p>"},{"location":"guide/overview/#completion-detection","title":"Completion Detection","text":"<p>Ralph detects task completion by: - Finding \"TASK_COMPLETE\" in the prompt file - Reaching maximum iterations - Exceeding time/token/cost limits - Encountering fatal errors</p>"},{"location":"guide/overview/#state-management","title":"State Management","text":"<p>Ralph maintains state through: - Prompt file: Current task state - Git commits: Historical checkpoints - Metrics files: Performance data - Archive directory: Prompt history</p>"},{"location":"guide/overview/#safety-features","title":"Safety Features","text":""},{"location":"guide/overview/#automatic-limits","title":"Automatic Limits","text":"<p>Ralph enforces multiple safety limits: - Iteration limit: Prevents infinite loops - Runtime limit: Caps execution time - Token limit: Controls API usage - Cost limit: Prevents budget overruns</p>"},{"location":"guide/overview/#error-handling","title":"Error Handling","text":"<p>Ralph handles errors gracefully: - Automatic retries with backoff - Circuit breaker for repeated failures - Graceful shutdown on SIGINT/SIGTERM - State preservation for recovery</p>"},{"location":"guide/overview/#security-controls","title":"Security Controls","text":"<p>Built-in security features: - Input sanitization - Command injection prevention - Path traversal protection - File size limits</p>"},{"location":"guide/overview/#best-practices","title":"Best Practices","text":""},{"location":"guide/overview/#writing-effective-prompts","title":"Writing Effective Prompts","text":"<ol> <li>Be specific: Clear requirements get better results</li> <li>Set boundaries: Define what should NOT be done</li> <li>Include examples: Show desired output format</li> <li>Add completion criteria: Specify when task is done</li> </ol>"},{"location":"guide/overview/#optimizing-performance","title":"Optimizing Performance","text":"<ol> <li>Start simple: Test with small tasks first</li> <li>Use checkpoints: Enable recovery from failures</li> <li>Monitor metrics: Watch token usage and costs</li> <li>Set appropriate limits: Avoid runaway execution</li> </ol>"},{"location":"guide/overview/#managing-costs","title":"Managing Costs","text":"<ol> <li>Set cost limits: Use <code>--max-cost</code> parameter</li> <li>Monitor token usage: Check metrics regularly</li> <li>Use appropriate models: Cheaper models for simple tasks</li> <li>Enable context management: Prevent overflow charges</li> </ol>"},{"location":"guide/overview/#common-use-cases","title":"Common Use Cases","text":""},{"location":"guide/overview/#code-generation","title":"Code Generation","text":"<pre><code># Generate a complete application\npython ralph_orchestrator.py \\\n  --prompt \"Build a todo app with React and Node.js\" \\\n  --max-iterations 50\n</code></pre>"},{"location":"guide/overview/#documentation","title":"Documentation","text":"<pre><code># Create comprehensive docs\npython ralph_orchestrator.py \\\n  --prompt \"Document this Python package\" \\\n  --agent claude \\\n  --max-cost 10.0\n</code></pre>"},{"location":"guide/overview/#data-processing","title":"Data Processing","text":"<pre><code># Process and analyze data\npython ralph_orchestrator.py \\\n  --prompt \"Clean and analyze sales_data.csv\" \\\n  --checkpoint-interval 10\n</code></pre>"},{"location":"guide/overview/#testing","title":"Testing","text":"<pre><code># Write comprehensive tests\npython ralph_orchestrator.py \\\n  --prompt \"Add unit tests for all modules\" \\\n  --max-runtime 7200\n</code></pre>"},{"location":"guide/overview/#monitoring-and-debugging","title":"Monitoring and Debugging","text":""},{"location":"guide/overview/#log-levels","title":"Log Levels","text":"<p>Control verbosity with <code>--verbose</code>: <pre><code># Normal output\npython ralph_orchestrator.py --prompt task.md\n\n# Detailed logging\npython ralph_orchestrator.py --prompt task.md --verbose\n</code></pre></p>"},{"location":"guide/overview/#metrics-files","title":"Metrics Files","text":"<p>Find metrics in <code>.agent/metrics/</code>: - <code>state_*.json</code>: Orchestrator state - <code>metrics_*.json</code>: Performance data - <code>tokens_*.json</code>: Token usage</p>"},{"location":"guide/overview/#checkpoint-history","title":"Checkpoint History","text":"<p>View Git history: <pre><code># See all checkpoints\ngit log --oneline\n\n# Restore previous state\ngit checkout &lt;commit-hash&gt;\n</code></pre></p>"},{"location":"guide/overview/#getting-help","title":"Getting Help","text":""},{"location":"guide/overview/#built-in-help","title":"Built-in Help","text":"<pre><code># Show all options\npython ralph_orchestrator.py --help\n\n# Show version\npython ralph_orchestrator.py --version\n\n# List available agents\npython ralph_orchestrator.py --list-agents\n</code></pre>"},{"location":"guide/overview/#resources","title":"Resources","text":"<ul> <li>Configuration Guide</li> <li>Agent Setup</li> <li>Prompt Writing</li> <li>Cost Management</li> <li>Troubleshooting</li> </ul>"},{"location":"guide/overview/#next-steps","title":"Next Steps","text":"<p>Now that you understand the basics:</p> <ol> <li>Configure your environment: Set up your preferred configuration</li> <li>Choose your agent: Learn about AI agents</li> <li>Write better prompts: Master prompt engineering</li> <li>Control costs: Implement cost management</li> <li>Deploy to production: Read the production guide</li> </ol> <p>\ud83d\udcda Continue to Configuration Guide \u2192</p>"}]}